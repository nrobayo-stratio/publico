{
  "data": {
    "serviceName": "rocket",
    "model": "default",
    "version": "13.2.1-SNAPSHOT",
    "description": "The easiest way to use Apache Spark technology and all its ecosystem.",
    "framework": false,
    "highAvailability": false,
    "container": {
      "runners": [
        {
          "typeClass": "com.stratio.tais.persistence.model.service.container.DockerRunner",
          "image": "${eos.dockerRegistry}/rocket-api:3.1.1",
          "forcePullImage": false,
          "privileged": false
        },
        {
          "typeClass": "com.stratio.tais.persistence.model.service.container.DockerResource",
          "image": "${eos.dockerRegistry}/rocket-driver:3.1.1"
        },
        {
          "typeClass": "com.stratio.tais.persistence.model.service.container.DockerResource",
          "image": "${eos.dockerRegistry}/rocket-executor:3.1.1"
        },
        {
          "typeClass": "com.stratio.tais.persistence.model.service.container.DockerResource",
          "image": "${eos.dockerRegistry}/rocket-mleap-microservice:3.1.1"
        },
        {
          "typeClass": "com.stratio.tais.persistence.model.service.container.DockerResource",
          "image": "${eos.dockerRegistry}/rocket-mlflow-microservice:3.1.1"
        }
      ],
      "volumes": [
        {
          "type": "mappedVolume",
          "containerPath": "/etc/krb5.conf",
          "map": "${krb5ConfigMapName}",
          "key": "krb5.conf",
          "mode": "READ_ONLY"
        },
        {
          "type": "mappedVolume",
          "containerPath": "/etc/hadoop/core-site.xml",
          "map": "${hdfsConfigMapName}",
          "key": "core-site.xml",
          "mode": "READ_ONLY"
        },
        {
          "type": "mappedVolume",
          "containerPath": "/etc/hadoop/hdfs-site.xml",
          "map": "${hdfsConfigMapName}",
          "key": "hdfs-site.xml",
          "mode": "READ_ONLY"
        }
      ]
    },
    "networking": {
      "expose": [
        {
          "portIndex": 0,
          "vhost": "${rocketServerHost}",
          "includePortName": false,
          "path": "",
          "redirectHttpToHttps": true,
          "sticky": true,
          "external": true,
          "schema": "https",
          "nginx.ingress.kubernetes.io/backend-protocol": "HTTPS",
          "nginx.ingress.kubernetes.io/proxy-body-size": 0,
          "nginx.ingress.kubernetes.io/proxy-connect-timeout": 300,
          "nginx.ingress.kubernetes.io/proxy-send-timeout": 300,
          "nginx.ingress.kubernetes.io/proxy-read-timeout": 300,
          "nginx.ingress.kubernetes.io/affinity": "cookie",
          "nginx.ingress.kubernetes.io/affinity-mode": "persistent",
          "nginx.ingress.kubernetes.io/session-cookie-expires": "172800",
          "nginx.ingress.kubernetes.io/session-cookie-max-age": "172800",
          "nginx.ingress.kubernetes.io/session-cookie-name": "stickyrocket",
          "nginx.ingress.kubernetes.io/session-cookie-path": "/${rocketVPath}"
        }
      ],
      "network": {
        "networkType": "user",
        "ports": [
          {
            "servicePort": 0,
            "protocol": "tcp",
            "name": "rocketapi",
            "labels": {},
            "containerPort": 9090
          },
          {
            "servicePort": 0,
            "protocol": "tcp",
            "name": "sparkapi",
            "labels": {},
            "containerPort": 4040
          },
          {
            "servicePort": 0,
            "protocol": "tcp",
            "name": "akkaseed",
            "labels": {},
            "containerPort": 10000
          },
          {
            "servicePort": 0,
            "protocol": "tcp",
            "name": "jmx",
            "labels": {},
            "containerPort": 5080
          },
          {
            "servicePort": 0,
            "protocol": "tcp",
            "name": "metrics",
            "labels": {},
            "containerPort": 6080
          },
          {
            "servicePort": 0,
            "protocol": "tcp",
            "name": "mutual",
            "labels": {},
            "containerPort": 7777
          }
        ],
        "requirePorts": false
      }
    },
    "healthChecks": {
      "tcp": [],
      "http": [
        {
          "gracePeriodSeconds": 5,
          "intervalSeconds": 15,
          "maxConsecutiveFailures": 25,
          "portIndex": 0,
          "path": "/appStatus",
          "secure": true,
          "timeoutSeconds": 10
        }
      ],
      "command": []
    },
    "secrets": {
      "appRole": "role",
      "secretRole": "${approlename}"
    },
    "dependencies": [
      {
        "id": "postgresConnectionDB",
        "title": "PostgreSQL used for connection",
        "query": "service: ((?i)(Postgres) OR (?i)(PgBouncer))",
        "required": true,
        "extended": true
      },
      {
        "id": "postgresPolicies",
        "title": "PostgreSQL used for policy creation. If connection is via PgBouncer, select the main PostgreSQL instance otherwise select the same instance as above",
        "query": "service: ((?i)(Postgres))",
        "required": true,
        "extended": false
      },
      {
        "id": "hdfsConnectionDB",
        "title": "HDFS used for connection",
        "query": "service: ((?i)(HDFS))",
        "required": false,
        "extended": false
      }
    ],
    "sso": {
      "name": "${Application.id}",
      "clientId": "${Application.id}-oauth-id",
      "serviceId": "https://${rocketServerHost}/${rocketVPath}/login",
      "secretPath": "userland/passwords/${Application.id}/oauthinfo"
    },
    "permissions": {
      "enabled": true,
      "policies": [
        "K8sSingleRole(id ${Application.name}, apiGroups [*], resources [deployments, services, jobs, podmonitors], verbs [get, list, create, update, delete])",
        "K8sSingleRole(id ${Application.name}, apiGroups [''], resources [pods], verbs [get, list, watch])",
        "K8sSingleRole(id ${Application.name}, apiGroups [*], resources [ingresses], verbs [create])",
        "K8sSingleRole(id ${Application.name}, apiGroups [*], resources [events], verbs [list])",
        "K8sSingleRole(id ${Application.name}, apiGroups [''], resources [serviceaccounts], verbs [get, create])",
        "K8sSingleRole(id ${Application.name}, apiGroups ['rbac.authorization.k8s.io'], resources [roles], verbs [bind], resourceNames [${Application.name}-execution])",
        "K8sSingleRole(id ${Application.name}, apiGroups ['rbac.authorization.k8s.io'], resources [rolebindings], verbs [get, create])",
        "K8sSingleRole(id ${Application.name}, apiGroups [''], resources [persistentvolumes, persistentvolumeclaims], verbs [get, list, watch, create, update, delete, patch])",
        "K8sServiceAccount(id ${Application.name}, role ${Application.name})",
        "K8sSingleRole(id ${Application.name}-externalservice, apiGroups [''], resources [pods], verbs [get, list, watch])",
        "K8sSingleRole(id ${Application.name}-externalservice, apiGroups [*], resources [deployments, jobs], verbs [get, list, delete])",
        "K8sServiceAccount(id ${Application.name}-externalservice, role ${Application.name}-externalservice)",
        "K8sSingleRole(id ${Application.name}-catalog, apiGroups [''], resources [pods], verbs [get, list, watch])",
        "K8sSingleRole(id ${Application.name}-catalog, apiGroups [*], resources [deployments], verbs [get, list, delete])",
        "K8sServiceAccount(id ${Application.name}-catalog, role ${Application.name}-catalog)",
        "K8sSingleRole(id ${Application.name}-debug, apiGroups [''], resources [pods], verbs [get, list, watch])",
        "K8sSingleRole(id ${Application.name}-debug, apiGroups [*], resources [deployments], verbs [get, list, delete])",
        "K8sServiceAccount(id ${Application.name}-debug, role ${Application.name}-debug)",
        "K8sSingleRole(id ${Application.name}-validator, apiGroups [''], resources [pods], verbs [get, list, watch])",
        "K8sSingleRole(id ${Application.name}-validator, apiGroups [*], resources [deployments], verbs [get, list, delete])",
        "K8sServiceAccount(id ${Application.name}-validator, role ${Application.name}-validator)",
        "K8sSingleRole(id ${Application.name}-execution, apiGroups [''], resources [pods], verbs [get, list, watch, create, update, delete, patch])",
        "K8sSingleRole(id ${Application.name}-execution, apiGroups [''], resources [configmaps], verbs [create, delete])",
        "K8sSingleRole(id ${Application.name}-execution, apiGroups [''], resources [secrets], verbs [create])",
        "K8sSingleRole(id ${Application.name}-execution, apiGroups [''], resources [persistentvolumes, persistentvolumeclaims], verbs [get, list, watch, create, update, delete, patch])",
        "K8sServiceAccount(id ${executionIdentity}, role ${Application.name}-execution)"
      ]
    }
  },
  "parameters": {
    "type": "object",
    "additionalProperties": false,
    "properties": {
      "general": {
        "type": "object",
        "additionalProperties": false,
        "ui": {
          "component": "standard"
        },
        "name": "general",
        "title": "General",
        "description": "Tab to configure the default deployment of a Rocket cluster.",
        "properties": {
          "serviceId": {
            "description": "Final path given to the service being deployed",
            "type": "string",
            "required": true,
            "readOnly": false,
            "application": true,
            "internalName": "SERVICE_ID",
            "ui": {
              "updatable": false
            },
            "title": "Rocket service name",
            "default": "rocket",
            "pattern": "^[a-z]([-a-z0-9]*[a-z0-9])?$",
            "maxLength": 55
          },
          "rocketServiceName": {
            "description": "Service ID used to name the Rocket instance.",
            "type": "string",
            "required": true,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "SPARTA_SERVICE_NAME",
            "ui": {
              "updatable": false
            },
            "title": "Rocket service name with namespace",
            "default": "${Application.id}"
          },
          "rocketVPath": {
            "description": "Path to connect to Rocket instance. Ingress is created automatically by CCT so, please, do not modify this value",
            "type": "string",
            "required": true,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "VIRTUAL_PATH",
            "ui": {
              "updatable": false
            },
            "title": "Rocket virtual path.",
            "default": "${Application.name}"
          },
          "eosTenantId": {
            "description": "Tenant where Rocket will be deployed.",
            "type": "string",
            "required": false,
            "minimum": 1,
            "readOnly": true,
            "application": false,
            "level": 2,
            "ui": {
              "updatable": false
            },
            "internalName": "EOS_TENANT",
            "title": "Internal tenant id",
            "default": "${tenantId}"
          },
          "serviceAccountName": {
            "description": "Service account used to deploy",
            "type": "string",
            "required": true,
            "readOnly": true,
            "level": 2,
            "ui": {
              "updatable": false
            },
            "application": false,
            "internalName": "SERVICE_ACCOUNT_NAME",
            "title": "Service account name",
            "default": "fieldRef:spec.serviceAccountName:v1"
          },
          "orchestrator": {
            "description": "Orchestrator - Kubernetes",
            "type": "string",
            "required": true,
            "readOnly": true,
            "level": 2,
            "ui": {
              "updatable": false
            },
            "application": false,
            "internalName": "SPARTA_ORCHESTRATOR",
            "title": "Orchestrator",
            "default": "kubernetes"
          },
          "namespace": {
            "description": "Namespace",
            "type": "string",
            "minimum": 1,
            "required": false,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "KUBERNETES_NAMESPACE",
            "ui": {
              "updatable": false
            },
            "title": "Namespace",
            "default": "${k8sNamespace}"
          },
          "serviceIdWithPath": {
            "description": "Final path given to the service being deployed",
            "type": "string",
            "required": true,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "SERVICE_ID_WITH_PATH",
            "ui": {
              "updatable": false
            },
            "title": "Rocket service complete path",
            "default": "${Application.id}"
          },
          "networking": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "standard"
            },
            "name": "networking",
            "title": "Networking",
            "description": "Tab to configure the networking access.",
            "properties": {
              "rocketServerHost": {
                "description": "URL host to access to your Stratio Rocket service. Usually in Stratio laboratories the value is any subdomain of xxx.labs.stratio.com, i.e rocket.k8s.xxx.labs.stratio.com.",
                "type": "string",
                "minimum": 1,
                "default": "rocket.${tenantId}.${external_domain}",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "VIRTUAL_HOST",
                "examples": [
                  "public.kubernetes.stratio.com",
                  "rocket.k8s.xxx.labs.stratio.com"
                ],
                "ui": {
                  "updatable": false
                },
                "title": "URI host"
              },
              "haProxyVHost": {
                "description": "URL host to access to your Spark UI",
                "type": "string",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "USER_HAPROXY_VHOST",
                "examples": [
                  "rocket.labs.stratio.com"
                ],
                "ui": {
                  "updatable": false
                },
                "default": "${rocketServerHost}",
                "title": "HA Proxy VHost"
              },
              "haProxyPathWorkflows": {
                "description": "Path to connect to Spark UI",
                "type": "string",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "USER_HAPROXY_PATH",
                "ui": {
                  "updatable": false
                },
                "title": "Base HAProxy path for Spark UI",
                "default": "/workflows-${rocketVPath}"
              }
            },
            "required": [
              "rocketServerHost"
            ]
          },
          "docker": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "docker",
            "title": "Docker",
            "description": "Tab to configure the Docker properties.",
            "properties": {
              "rocketWorkerDockerImage": {
                "description": "The docker image used to deploy the rocket worker services.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": true,
                "application": false,
                "level": 2,
                "internalName": "ROCKET_API_DOCKER_IMAGE",
                "title": "Workers docker image",
                "default": "${eos.dockerRegistry}/rocket-api:3.1.1"
              },
              "workerImagePullPolicy": {
                "description": "Worker image pull policy. Used in all services.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "KUBERNETES_IMAGE_PULL_POLICY",
                "ui": {
                  "updatable": false
                },
                "title": "Worker image pull policy",
                "enum": [
                  "IfNotPresent",
                  "Always",
                  "Never"
                ],
                "default": "IfNotPresent"
              },
              "driverDockerImage": {
                "description": "The docker image used to deploy the driver by default.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": true,
                "application": false,
                "level": 2,
                "internalName": "ROCKET_DRIVER_DOCKER_IMAGE",
                "title": "Driver docker image",
                "default": "${eos.dockerRegistry}/rocket-driver:3.1.1"
              },
              "driverDockerVolumes": {
                "description": "The container volumes mounted into the driver docker image. Leave empty for default value",
                "type": "string",
                "maxLength": 500,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ROCKET_DRIVER_DOCKER_VOLUMES",
                "title": "Driver docker volumes. Leave empty for default value"
              },
              "sparkExecutorDockerImage": {
                "description": "The docker image used to deploy the spark executors by default.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": true,
                "application": false,
                "level": 2,
                "internalName": "SPARK_EXECUTOR_BASE_IMAGE",
                "title": "Spark executor docker image",
                "default": "${eos.dockerRegistry}/rocket-executor:3.1.1"
              },
              "sparkExecutorDockerVolumes": {
                "description": "The container volumes mounted into the Spark executors docker image. Leave empty for default value",
                "type": "string",
                "maxLength": 500,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_EXECUTOR_DOCKER_VOLUMES",
                "title": "Spark executor docker volumes. Leave empty for default value"
              },
              "volumePath": {
                "description": "Allowed base path for mounting volumes. To be retrieved from centralized configuration in future versions",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "internalName": "VOLUMES_BASE_PATH",
                "ui": {
                  "updatable": true
                },
                "level": 1,
                "title": "Allowed base path for mounting volumes",
                "default": "/opt/stratio/tenants/${tenantId}"
              }
            },
            "required": []
          },
          "identity": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "identity",
            "title": "Default Execution Identity",
            "description": "Section to configure the generic executions identity",
            "properties": {
              "executionIdentity": {
                "description": "When creating a new Rocket project, this identity will be set as the default execution identity of the project. The execution identities are the ones used by asset executions to authenticate towards external services. Once the project is created, more execution identities can be added and this default can be changed. This identity will be created in Gosec and added to the default Metadata (posgres) and Catalog policies.",
                "type": "string",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "pattern": "^([a-z0-9]+[.-]*)+((\\$\\{Application.name\\}\\.\\$\\{Application.domain\\}){1}|[a-z0-9]+)",
                "maxLength": 254,
                "internalName": "ROCKET_EXECUTION_IDENTITY",
                "ui": {
                  "updatable": true
                },
                "default": "execution-identity-${Application.name}.${Application.domain}",
                "title": "Default Execution identity name"
              },
              "executionIdentityVaultPrefix": {
                "description": "The secrets for this default execution identity will be stored in a vault path that is the same as the one used by the Rocket application, but with this prefix added.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "pattern": "^([a-z0-9]+[.-]*)+",
                "application": false,
                "level": 1,
                "internalName": "ROCKET_EXECUTION_IDENTITY_VAULT_PREFIX_PATH",
                "ui": {
                  "updatable": true
                },
                "title": "Execution identity vault path prefix",
                "default": "execution-identity-"
              }
            },
            "required": [
              "executionIdentity"
            ]
          },
          "postgresql": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "postgresql",
            "title": "PostgreSQL",
            "description": "Section to configure PostgreSQL. PostgreSQL is the persistent storage of Rocket's backend.",
            "properties": {
              "postgresPgHost": {
                "description": "Postgres service name used to build the connection string.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_POSTGRES_HOST",
                "title": "Postgres service host (filled via Service Discovery section)",
                "default": "${postgresConnectionDB.host}.${postgresConnectionDB.namespace}:5432"
              },
              "postgresServiceId": {
                "description": "Postgres service name used to create the Gosec policies.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": true,
                "level": 2,
                "internalName": "SPARTA_SERVICE_ID",
                "title": "Postgres Service ID (filled via Service Discovery section)",
                "example": "pg-centralized.keos-datastores",
                "default": "${postgresPolicies.host}.${postgresPolicies.namespace}"
              },
              "postgresDbCreationClusterName": {
                "description": "Postgres service name used to create the database.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": true,
                "level": 2,
                "internalName": "POSTGRES_DB_CREATION",
                "title": "PostgresDB cluster name (filled via Service Discovery section)",
                "example": "pg-centralized",
                "default": "${postgresPolicies.host}"
              },
              "postgresNamespace": {
                "description": "Postgres namespace used to create the database.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": true,
                "level": 2,
                "internalName": "POSTGRES_NAMESPACE_CREATION",
                "title": "PostgresDB namespace (filled via Service Discovery section)",
                "default": "${postgresPolicies.namespace}"
              },
              "postgresDatabase": {
                "description": "Set the database name to use in Postgres e.g. postgres, rocket.",
                "type": "string",
                "minLength": 1,
                "required": true,
                "readOnly": false,
                "pattern": "^[\\S]*$",
                "application": false,
                "level": 1,
                "internalName": "SPARTA_POSTGRES_DATABASE",
                "examples": [
                  "rocket"
                ],
                "default": "${serviceId}",
                "ui": {
                  "updatable": false
                },
                "title": "Postgres Database"
              },
              "postgresSchema": {
                "description": "Set the schema name to use in Postgres.",
                "type": "string",
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_POSTGRES_SCHEMA_NAME",
                "examples": [
                  "rocket"
                ],
                "title": "Postgres Schema",
                "default": "${Application.id}"
              },
              "postgresUser": {
                "description": "Postgres user.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_POSTGRES_USER",
                "ui": {
                  "updatable": false
                },
                "title": "Postgres user",
                "default": "${Application.id}"
              },
              "postgresMore": {
                "type": "object",
                "additionalProperties": false,
                "ui": {
                  "component": "show-more"
                },
                "name": "postgresMore",
                "title": "",
                "description": "",
                "properties": {
                  "postgresExtraParams": {
                    "description": "Specify the extra-parameters to be added to the hostname, e.g. prepareThreshold=0.",
                    "type": "string",
                    "maxLength": 256,
                    "minLength": 1,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_POSTGRES_EXTRAPARAMS",
                    "title": "Postgres extra parameters",
                    "default": "prepareThreshold=0&leakDetectionThreshold=20000&reWriteBatchedInserts=true"
                  },
                  "postgresKeepAlive": {
                    "description": "Set property keep alive connections in Postgres.",
                    "type": "boolean",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_POSTGRES_KEEP_ALIVE",
                    "title": "Postgres keep alive connections",
                    "default": false
                  },
                  "postgresInitializationFailFast": {
                    "description": "Set property keep alive connections in Postgres.",
                    "type": "boolean",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 2,
                    "internalName": "SPARTA_POSTGRES_POOL_INITIALIZATION_FAIL_FAST",
                    "title": "Postgres initialization fail fast",
                    "default": true
                  },
                  "postgresQueueSize": {
                    "description": "Set the queue size in slick pool",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 3000,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 2,
                    "internalName": "SPARTA_POSTGRES_POOL_QUEUE_SIZE",
                    "title": "Postgres slick queue size",
                    "default": 3000
                  },
                  "postgresExecutionContextParallelism": {
                    "description": "Number of thread running simultaneusly",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 200,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 2,
                    "internalName": "SPARTA_POSTGRES_EXECUTION_CONTEXT_PARALLELISM",
                    "title": "Postgres execution context parallelism level",
                    "default": 64
                  },
                  "postgresPoolThreads": {
                    "description": "Set a pool threads size for postgres",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 30,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_POSTGRES_POOL_THREADS",
                    "title": "Postgres connection pool threads size",
                    "default": 8
                  },
                  "postgresPoolMaxSizeConnections": {
                    "description": "Set a connection pool max size for postgres",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 30,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_POSTGRES_POOL_MAX_CONNECTIONS",
                    "title": "Postgres connection max pool size",
                    "default": 8
                  },
                  "postgresPoolMinSizeConnections": {
                    "description": "Set a connection pool max size for postgres",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 30,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_POSTGRES_POOL_MIN_CONNECTIONS",
                    "title": "Postgres connection min pool size",
                    "default": 8
                  },
                  "postgresPoolConnectionTimeout": {
                    "description": "Set a connection pool size for Postgres in applications.",
                    "type": "integer",
                    "minimum": 1,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_POSTGRES_POOL_CONNECTION_TIMEOUT",
                    "title": "Postgres pool connection timeout",
                    "default": 20000
                  },
                  "postgresPoolValidationTimeout": {
                    "description": "Set a connection pool size for Postgres in applications.",
                    "type": "integer",
                    "minimum": 1,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_POSTGRES_POOL_VALIDATION_TIMEOUT",
                    "title": "Postgres pool validation timeout",
                    "default": 3000
                  },
                  "postgresLeakDetectionThreshold": {
                    "description": "This property controls the amount of time that a connection can be out of the pool before a message is logged indicating a possible connection leak. A value of 0 means leak detection is disabled. Lowest acceptable value for enabling leak detection is 2000 (2 seconds).",
                    "type": "integer",
                    "minimum": 1,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_POSTGRES_POOL_LEAK_DETECTION_THRESHOLD",
                    "title": "Postgres leak detection threshold",
                    "default": 60000
                  },
                  "postgresWorkerConnections": {
                    "description": "Set a connection pool size for workers Postgres connections",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 30,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "ui": {
                      "updatable": true
                    },
                    "internalName": "SPARTA_WORKER_POSTGRES_CONNECTIONS",
                    "title": "Worker Postgres connections pool size",
                    "default": 1
                  }
                },
                "required": []
              }
            },
            "required": [
              "postgresDatabase"
            ]
          },
          "catalog": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "catalog",
            "title": "Catalog",
            "description": "In this tab you can configure Catalog's properties used in Rocket.",
            "properties": {
              "crossdataCatalogImplementation": {
                "description": "Set Hive implementation by default",
                "type": "string",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "CROSSDATA_CORE_CATALOG_IMPLEMENTATION",
                "title": "Catalog implementation",
                "default": "HiveCatalog",
                "enum": [
                  "InMemoryCatalog",
                  "HiveCatalog"
                ]
              },
              "crossdataCatalogHiveDatabase": {
                "description": "Set hive database by default. Set 'virtualizer' if you want to share with Crossdata",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "CROSSDATA_CORE_CATALOG_HIVE_DATABASE",
                "title": "Hive database (set 'virtualizer' if you want to share with Crossdata)",
                "default": "virtualizer"
              },
              "crossdataCatalogHiveDatabaseAuthorizationPolicy": {
                "description": "Boolean flag to indicate if authorization policy associated to catalog must be created as a pre-deployment task",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": true,
                "level": 1,
                "internalName": "CROSSDATA_HIVE_POSTGRES_AUTHORIZATION_POLICY_TASK",
                "title": "Create catalog authorization policy as a pre-deployment task (mark it if database creation is checked as well)",
                "default": true
              },
              "crossdataServiceName": {
                "description": "Crossdata Vault path.",
                "type": "string",
                "maxLength": 500,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "CROSSDATA_CATALOG_SECRET_INSTANCE_NAME",
                "title": "Crossdata service name used in datastore vault secrets",
                "default": "${Application.id}"
              },
              "sparkDriverSecretFolder": {
                "description": "Folder where are stored the secrets that the spark driver will use",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARK_DRIVER_SECRET_FOLDER",
                "title": "Spark driver secret folder",
                "default": "/tmp/secrets"
              }
            },
            "required": []
          },
          "external": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "external",
            "title": "External Services",
            "description": "Section to configure external services",
            "properties": {
              "hdfs": {
                "type": "object",
                "additionalProperties": false,
                "ui": {
                  "component": "accordion"
                },
                "name": "hdfs",
                "title": "HDFS",
                "description": "Configures HDFS for this Rocket instance. This is used by Rocket to store plugins and checkpoints. Note that if there is no HDFS configured Rocket will work without custom plugins and Streaming jobs.",
                "properties": {
                  "hdfsEnable": {
                    "description": "Section to configure an HDFS",
                    "type": "boolean",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "HDFS_ENABLE",
                    "title": "HDFS Enabled",
                    "default": true
                  },
                  "executePrerequisitesHdfsPolicy": {
                    "description": "Create HDFS policy automatically for this Rocket instance.",
                    "type": "boolean",
                    "required": false,
                    "readOnly": false,
                    "application": true,
                    "level": 1,
                    "internalName": "PREREQUISITES_HDFS_POLICY",
                    "title": "Create HDFS policy",
                    "default": true
                  },
                  "HDFSConfigurationSource": {
                    "description": "Method used to obtain HDFS and Kerberos configuration files.",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "HDFS_CONF_SOURCE",
                    "title": "HDFS Configuration source",
                    "enum": [
                      "k8s-configmap"
                    ],
                    "default": "k8s-configmap"
                  },
                  "hdfsConfigMapName": {
                    "description": "Select the configmap used to connect with hdfs",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "ROCKET_HDFS_HADOOP_CONFIG_MAP",
                    "ui": {
                      "visible": {
                        "HDFSConfigurationSource": "k8s-configmap"
                      }
                    },
                    "title": "HDFS config map",
                    "default": "${hdfsConnectionDB.host.default}-${hdfsConnectionDB.namespace}-config"
                  },
                  "hdfsRocketBasePath": {
                    "description": "HDFS data base path (by default /user/<service-name>.<namespace>)",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "ROCKET_HDFS_DATA_BASE_PATH",
                    "title": "HDFS data base path (by default /user/<service-name>.<namespace>)",
                    "default": "/user/${Application.id}"
                  },
                  "hadoopConfFromUri": {
                    "description": "Enables downloading the core-site.xml and hdfs-site.xml from an URI.",
                    "type": "boolean",
                    "required": false,
                    "readOnly": true,
                    "application": false,
                    "level": 2,
                    "internalName": "HADOOP_CONF_FROM_URI",
                    "title": "HDFS configuration from URI",
                    "default": false
                  },
                  "hadoopUserName": {
                    "description": "Name of the user to connect to HDFS.",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 2,
                    "internalName": "HADOOP_USER_NAME",
                    "ui": {
                      "updatable": false
                    },
                    "title": "Hadoop user name",
                    "default": "${serviceId}"
                  },
                  "hdfsKeytabReload": {
                    "description": "Flag to reload the keytab after certain time.",
                    "type": "boolean",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 2,
                    "internalName": "HDFS_KEYTAB_RELOAD",
                    "title": "HDFS keytab reload",
                    "default": true
                  },
                  "hdfsKeytabReloadTime": {
                    "description": "Maximun time to refresh the keytab of HDFS.",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 2,
                    "internalName": "HDFS_KEYTAB_RELOAD_TIME",
                    "title": "HDFS keytab reload time",
                    "default": "23h"
                  },
                  "crossdataHdfsDelegationTokenDisableCache": {
                    "description": "HDFS delegation token disable cache in Spark. By default is disabled in order to avoid token renovation issues between Spark and HDFS.",
                    "type": "boolean",
                    "required": false,
                    "readOnly": true,
                    "application": false,
                    "level": 2,
                    "internalName": "CROSSDATA_HDFS_DELEGATION_TOKEN_DISABLE_CACHE",
                    "title": "Disable cache of HDFS delegation token",
                    "default": true
                  }
                },
                "required": []
              },
              "externalHdfs": {
                "type": "object",
                "additionalProperties": false,
                "ui": {
                  "component": "switch"
                },
                "name": "externalHdfs",
                "title": "External Multi-HDFS configuration",
                "description": "Tab to configure all the properties related to external HDFS. Internal HDFS must not be included.",
                "properties": {
                  "externalHdfsEnable": {
                    "description": "Enable External Multi-HDFS. By default is disabled.",
                    "type": "boolean",
                    "required": true,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARK_SECURITY_EXTERNALHDFS_ENABLE",
                    "title": "External Multi-HDFS enabled",
                    "default": false
                  },
                  "numMaxExternalHdfs": {
                    "description": "Maximum number of external hdfs configured. By default 4.",
                    "type": "integer",
                    "required": true,
                    "readOnly": true,
                    "application": false,
                    "level": 2,
                    "internalName": "EXTERNAL_HDFS_NUM_MAX",
                    "title": "Maximum external hdfs configured",
                    "default": 4
                  },
                  "externalHdfs1": {
                    "type": "object",
                    "additionalProperties": false,
                    "ui": {
                      "component": "switch"
                    },
                    "name": "externalHdfs1Switch",
                    "title": "Enable HDFS 1",
                    "description": "Enable HDFS 1",
                    "properties": {
                      "externalHdfs1Enable": {
                        "description": "Enable HDFS 1",
                        "type": "boolean",
                        "readOnly": false,
                        "application": false,
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_ENABLE_1",
                        "title": "Enable HDFS 1",
                        "default": false
                      },
                      "externalHdfsName1": {
                        "description": "External HDFS name",
                        "type": "string",
                        "maxLength": 50,
                        "pattern": "^[a-zA-Z0-9]+([_.-][a-zA-Z0-9]+)*$",
                        "required": false,
                        "readOnly": false,
                        "application": false,
                        "ui": {
                          "visible": {
                            "externalHdfs1Enable": true
                          }
                        },
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_NAME_1",
                        "title": "External HDFS name",
                        "default": ""
                      },
                      "externalHdfsConfigUri1": {
                        "description": "External HDFS configuration URI",
                        "type": "string",
                        "required": false,
                        "readOnly": false,
                        "application": false,
                        "ui": {
                          "visible": {
                            "externalHdfs1Enable": true
                          }
                        },
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_CONF_URI_1",
                        "title": "External HDFS configuration URI",
                        "default": ""
                      },
                      "externalHdfsVaultId1": {
                        "description": "External HDFS Keytab Vault identification. Both the server identity secret and the execution identity secret with this identification extra like a prefix must exist under the vault kerberos path. Pattern: identification-serveridentity.namespace and identification-executionidentity.namespace",
                        "type": "string",
                        "required": false,
                        "readOnly": false,
                        "application": false,
                        "ui": {
                          "visible": {
                            "externalHdfs1Enable": true
                          }
                        },
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_VAULT_ID_1",
                        "title": "External HDFS Keytab Vault identification",
                        "default": ""
                      }
                    },
                    "required": []
                  },
                  "externalHdfs2": {
                    "type": "object",
                    "additionalProperties": false,
                    "ui": {
                      "component": "switch"
                    },
                    "name": "externalHdfs2Switch",
                    "title": "Enable HDFS 2",
                    "description": "Enable HDFS 2",
                    "properties": {
                      "externalHdfs2Enable": {
                        "description": "Enable HDFS 2",
                        "type": "boolean",
                        "readOnly": false,
                        "application": false,
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_ENABLE_2",
                        "title": "Enable HDFS 2",
                        "default": false
                      },
                      "externalHdfsName2": {
                        "description": "External HDFS name",
                        "type": "string",
                        "maxLength": 50,
                        "pattern": "^[a-zA-Z0-9]+([_.-][a-zA-Z0-9]+)*$",
                        "required": false,
                        "readOnly": false,
                        "application": false,
                        "ui": {
                          "visible": {
                            "externalHdfs2Enable": true
                          }
                        },
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_NAME_2",
                        "title": "External HDFS name",
                        "default": ""
                      },
                      "externalHdfsConfigUri2": {
                        "description": "External HDFS configuration URI",
                        "type": "string",
                        "required": false,
                        "readOnly": false,
                        "application": false,
                        "ui": {
                          "visible": {
                            "externalHdfs2Enable": true
                          }
                        },
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_CONF_URI_2",
                        "title": "External HDFS configuration URI",
                        "default": ""
                      },
                      "externalHdfsVaultId2": {
                        "description": "External HDFS Keytab Vault identification. Both the server identity secret and the execution identity secret with this identification extra like a prefix must exist under the vault kerberos path. Pattern: identification-serveridentity.namespace and identification-executionidentity.namespace",
                        "type": "string",
                        "required": false,
                        "readOnly": false,
                        "application": false,
                        "ui": {
                          "visible": {
                            "externalHdfs2Enable": true
                          }
                        },
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_VAULT_ID_2",
                        "title": "External HDFS Keytab Vault identification",
                        "default": ""
                      }
                    },
                    "required": []
                  },
                  "externalHdfs3": {
                    "type": "object",
                    "additionalProperties": false,
                    "ui": {
                      "component": "switch"
                    },
                    "name": "externalHdfs3Switch",
                    "title": "Enable HDFS 3",
                    "description": "Enable HDFS 3",
                    "properties": {
                      "externalHdfs3Enable": {
                        "description": "Enable HDFS 3",
                        "type": "boolean",
                        "readOnly": false,
                        "application": false,
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_ENABLE_3",
                        "title": "Enable HDFS 3",
                        "default": false
                      },
                      "externalHdfsName3": {
                        "description": "External HDFS name",
                        "type": "string",
                        "maxLength": 50,
                        "pattern": "^[a-zA-Z0-9]+([_.-][a-zA-Z0-9]+)*$",
                        "required": false,
                        "readOnly": false,
                        "application": false,
                        "ui": {
                          "visible": {
                            "externalHdfs3Enable": true
                          }
                        },
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_NAME_3",
                        "title": "External HDFS name",
                        "default": ""
                      },
                      "externalHdfsConfigUri3": {
                        "description": "External HDFS configuration URI",
                        "type": "string",
                        "required": false,
                        "readOnly": false,
                        "application": false,
                        "ui": {
                          "visible": {
                            "externalHdfs3Enable": true
                          }
                        },
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_CONF_URI_3",
                        "title": "External HDFS configuration URI",
                        "default": ""
                      },
                      "externalHdfsVaultId3": {
                        "description": "External HDFS Keytab Vault identification. Both the server identity secret and the execution identity secret with this identification extra like a prefix must exist under the vault kerberos path. Pattern: identification-serveridentity.namespace and identification-executionidentity.namespace",
                        "type": "string",
                        "required": false,
                        "readOnly": false,
                        "application": false,
                        "ui": {
                          "visible": {
                            "externalHdfs3Enable": true
                          }
                        },
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_VAULT_ID_3",
                        "title": "External HDFS Keytab Vault identification",
                        "default": ""
                      }
                    },
                    "required": []
                  },
                  "externalHdfs4": {
                    "type": "object",
                    "additionalProperties": false,
                    "ui": {
                      "component": "switch"
                    },
                    "name": "externalHdfs4Switch",
                    "title": "Enable HDFS 4",
                    "description": "Enable HDFS 4",
                    "properties": {
                      "externalHdfs4Enable": {
                        "description": "Enable HDFS 4",
                        "type": "boolean",
                        "readOnly": false,
                        "application": false,
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_ENABLE_4",
                        "title": "Enable HDFS 4",
                        "default": false
                      },
                      "externalHdfsName4": {
                        "description": "External HDFS name",
                        "type": "string",
                        "maxLength": 50,
                        "pattern": "^[a-zA-Z0-9]+([_.-][a-zA-Z0-9]+)*$",
                        "required": false,
                        "readOnly": false,
                        "application": false,
                        "ui": {
                          "visible": {
                            "externalHdfs4Enable": true
                          }
                        },
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_NAME_4",
                        "title": "External HDFS name",
                        "default": ""
                      },
                      "externalHdfsConfigUri4": {
                        "description": "External HDFS configuration URI",
                        "type": "string",
                        "required": false,
                        "readOnly": false,
                        "application": false,
                        "ui": {
                          "visible": {
                            "externalHdfs4Enable": true
                          }
                        },
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_CONF_URI_4",
                        "title": "External HDFS configuration URI",
                        "default": ""
                      },
                      "externalHdfsVaultId4": {
                        "description": "External HDFS Keytab Vault identification. Both the server identity secret and the execution identity secret with this identification extra like a prefix must exist under the vault kerberos path. Pattern: identification-serveridentity.namespace and identification-executionidentity.namespace",
                        "type": "string",
                        "required": false,
                        "readOnly": false,
                        "application": false,
                        "ui": {
                          "visible": {
                            "externalHdfs4Enable": true
                          }
                        },
                        "level": 1,
                        "internalName": "EXTERNAL_HDFS_VAULT_ID_4",
                        "title": "External HDFS Keytab Vault identification",
                        "default": ""
                      }
                    },
                    "required": []
                  }
                },
                "required": [
                  "externalHdfsEnable",
                  "numMaxExternalHdfs"
                ]
              },
              "s3": {
                "type": "object",
                "additionalProperties": false,
                "ui": {
                  "component": "accordion"
                },
                "name": "s3",
                "title": "S3 configuration",
                "description": "Tab to configure all the properties related to S3",
                "properties": {
                  "s3ConfigurationEnabled": {
                    "description": "Whether or not make visible and enable the S3 configuration properties",
                    "type": "boolean",
                    "required": true,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARK_SECURITY_S3_ENABLE",
                    "title": "S3 configuration enabled",
                    "default": false
                  },
                  "s3AlternativeEndpoint": {
                    "description": "S3 endpoint (i.e. spark.hadoop.fs.s3a.endpoint). Without this property, the standard region (s3.amazonaws.com) is assumed",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARK_HADOOP_FS_S3A_ENDPOINT",
                    "title": "S3 endpoint (optional)"
                  },
                  "awsS3CredentialsVaultName": {
                    "description": "Vault secret where s3 access credentials (accessKey and secretKey) are stored. The secret need to be stored in v1/<<cluster_name>>/passwords/<<identity>>/<<secret>>.",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARK_SECURITY_S3_SECRETS_VAULT_NAME",
                    "title": "Credentials vault secret",
                    "default": "",
                    "examples": [
                      "dg-s3"
                    ]
                  },
                  "s3AssumedRoleAuthenticationSwitch": {
                    "type": "object",
                    "additionalProperties": false,
                    "ui": {
                      "component": "switch"
                    },
                    "name": "s3AssumedRoleAuthenticationSwitch",
                    "title": "Enable S3 authentication with IAM Role (assumed role)",
                    "description": "Enable S3 authentication with IAM Role (assumed role)",
                    "properties": {
                      "s3AssumedRoleAuthenticationEnable": {
                        "description": "Enable S3 authentication with IAM Role (assumed role)",
                        "type": "boolean",
                        "required": false,
                        "readOnly": false,
                        "application": true,
                        "level": 1,
                        "internalName": "S3_ASSUMED_ROLE_AUTHENTICATION",
                        "title": "Enable S3 authentication with IAM Role (assumed role)",
                        "default": false
                      },
                      "s3AssumedRoleArn": {
                        "description": "S3 assumed role ARN",
                        "type": "string",
                        "required": false,
                        "readOnly": false,
                        "examples": [
                          "arn:partition:service:region:account-id:resource-id"
                        ],
                        "application": false,
                        "level": 1,
                        "internalName": "SPARK_HADOOP_FS_S3A_ASSUMED_ROLE_ARN",
                        "title": "Assumed role ARN"
                      },
                      "s3AssumedRoleStsEndpoint": {
                        "description": "S3 assumed role STS endpoint",
                        "type": "string",
                        "required": false,
                        "readOnly": false,
                        "examples": [
                          "https://sts.eu-west-1.amazonaws.com"
                        ],
                        "application": false,
                        "level": 1,
                        "internalName": "SPARK_HADOOP_FS_S3A_ASSUMEDROLE_STS_ENDPOINT",
                        "title": "Assumed role STS endpoint"
                      },
                      "s3AssumedRoleStsEndpointRegion": {
                        "description": "S3 assumed role STS endpoint region",
                        "type": "string",
                        "required": false,
                        "readOnly": false,
                        "examples": [
                          "eu-west-1"
                        ],
                        "application": false,
                        "level": 1,
                        "internalName": "SPARK_HADOOP_FS_S3A_ASSUMEDROLE_STS_ENDPOINT_REGION",
                        "title": "STS endpoint region"
                      },
                      "s3CredentialProviderClass": {
                        "description": "S3 credential provider class",
                        "type": "string",
                        "required": false,
                        "readOnly": true,
                        "application": false,
                        "examples": [
                          "org.apache.hadoop.fs.s3a.auth.AssumedRoleCredentialProvider"
                        ],
                        "level": 1,
                        "internalName": "SPARK_HADOOP_FS_S3A_CREDENTIALS_PROVIDER",
                        "title": "Credential provider class"
                      },
                      "awsProxySSLenabled": {
                        "description": "Whether or not enable proxy SSL security",
                        "type": "boolean",
                        "required": false,
                        "readOnly": false,
                        "application": false,
                        "level": 1,
                        "internalName": "S3_STS_PROXY_SSL_ENABLED",
                        "default": false,
                        "title": "Enable proxy SSL security"
                      }
                    }
                  }
                },
                "required": [
                  "s3ConfigurationEnabled"
                ]
              },
              "adls2": {
                "type": "object",
                "additionalProperties": false,
                "ui": {
                  "component": "accordion"
                },
                "name": "azuredatalake",
                "title": "Azure Data Lake configuration",
                "description": "Tab to configure all the properties related to Azure Data Lake",
                "properties": {
                  "adls2ConfigurationEnabled": {
                    "description": "Whether or not make visible and enable the Azure Data Lake configuration properties",
                    "type": "boolean",
                    "required": true,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARK_SECURITY_ADLS2_ENABLE",
                    "title": "Adls2 configuration enabled",
                    "default": false
                  },
                  "adls2AccountName": {
                    "description": "Vault path where credentials (clientId and clientSecret) are located",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARK_SECURITY_ADLS2_ACCOUNT_NAME",
                    "title": "Storage account in Azure"
                  },
                  "adls2DirectoryName": {
                    "description": "Tenant/directory identifier en Azure. You can find it in Azure active directory",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "examples": [
                      "9c2f8eb6-xxxx-1111-aaaa-0357395935f5"
                    ],
                    "level": 1,
                    "internalName": "SPARK_HADOOP_ADLS2_DIRECTORY_NAME",
                    "title": "Tenant/directory identifier in Azure"
                  },
                  "adls2SkipUserGroupMetadata": {
                    "description": "Whether to skip user/group metadata on initialization",
                    "type": "boolean",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 2,
                    "internalName": "SPARK_HADOOP_ADLS2_SKIP_USER_GROUP_METADATA",
                    "title": "Skip user/group metadata on initialization",
                    "default": true
                  }
                },
                "required": [
                  "adls2ConfigurationEnabled"
                ]
              },
              "gcs": {
                "type": "object",
                "additionalProperties": false,
                "ui": {
                  "component": "accordion"
                },
                "name": "googlecloudstorage",
                "title": "Google Cloud Storage configuration",
                "description": "Tab to configure all the properties related to Google Cloud Storage",
                "properties": {
                  "gcsConfigurationEnabled": {
                    "description": "Whether or not make visible and enable the Google Cloud Storage configuration properties",
                    "type": "boolean",
                    "required": true,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARK_SECURITY_GCS_ENABLE",
                    "title": "GCS configuration enabled",
                    "default": false
                  },
                  "gcsServiceAccount": {
                    "description": "Service account name in Google Cloud Storage, this value is used as the Vault path where credentials (private key) are located too",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARK_SECURITY_GCS_SERVICE_ACCOUNT",
                    "title": "Service account in Google Cloud Storage"
                  },
                  "gcsProjectId": {
                    "description": "Project id in Google Cloud Storage",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARK_SECURITY_GCS_PROJECT_ID",
                    "title": "Project id in Google Cloud Storage"
                  }
                },
                "required": [
                  "gcsConfigurationEnabled"
                ]
              }
            },
            "required": []
          },
          "resources": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "resources",
            "title": "Server Resources",
            "description": "",
            "properties": {
              "INSTANCES": {
                "description": "Instances for the service",
                "type": "integer",
                "required": true,
                "readOnly": false,
                "application": true,
                "level": 1,
                "internalName": "INSTANCES",
                "title": "Instances",
                "default": 1
              },
              "CPUs": {
                "description": "CPUs for the service",
                "type": "integer",
                "required": true,
                "readOnly": false,
                "application": true,
                "level": 1,
                "internalName": "CPUs",
                "title": "CPUs",
                "default": 3
              },
              "MEM": {
                "description": "Memory for the service",
                "type": "integer",
                "required": true,
                "readOnly": false,
                "application": true,
                "level": 1,
                "internalName": "MEM",
                "title": "Memory (MB)",
                "default": 4096
              },
              "DISK": {
                "description": "Disk for the service",
                "type": "integer",
                "required": true,
                "readOnly": false,
                "application": true,
                "level": 2,
                "internalName": "DISK",
                "title": "Disk",
                "default": 0
              },
              "moreresources": {
                "type": "object",
                "additionalProperties": false,
                "ui": {
                  "component": "show-more"
                },
                "name": "moreresources",
                "title": "",
                "description": "Section to configure JVM properties",
                "properties": {
                  "javaInitialRamPercentage": {
                    "description": "Initial size of the Java heap as a percentage (0 - 100) of the total memory available to the VM (relevant to server and workers). Corresponding to '-XX:InitialRAMPercentage'. Default 25.0",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "JAVA_INITIAL_RAM_PERCENTAGE",
                    "title": "Initial size of the Java heap as a percentage",
                    "default": "-XX:InitialRAMPercentage=25.0"
                  },
                  "javaMaxRamPercentage": {
                    "description": "Maximum size of the Java heap as a percentage (0 - 100) of the total memory available to the VM (relevant to server and workers). Corresponding to '-XX:MaxRAMPercentage'. Default 85.0",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "JAVA_MAX_RAM_PERCENTAGE",
                    "title": "Maximum size of the Java heap as a percentage",
                    "default": "-XX:MaxRAMPercentage=85.0"
                  },
                  "scalaMinNumThread": {
                    "description": "Set the parallelism level of scala based on the number of available processors. Set a multiplier after the property. E.g. -Dscala.concurrent.context.numThreads=x10",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SCALA_CONCURRENCY_NUM_THREADS",
                    "title": "Scala concurrency Context numThreads",
                    "default": "-Dscala.concurrent.context.numThreads=x10"
                  },
                  "scalaMaxNumThread": {
                    "description": "Set max parallelism level of scala. E.g. -Dscala.concurrent.context.maxThreads=x50",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SCALA_CONCURRENCY_MAX_THREADS",
                    "title": "Scala concurrency Context max Threads",
                    "default": "-Dscala.concurrent.context.maxThreads=x50"
                  }
                },
                "required": []
              }
            },
            "required": [
              "INSTANCES",
              "CPUs",
              "MEM",
              "DISK"
            ]
          },
          "metrics": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "metrics",
            "title": "Metrics",
            "description": "JMX and Prometheus metrics configuration for service and asset executions",
            "properties": {
              "userMetricsEnable": {
                "description": "Whether or not enable the metrics feature integration",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "USER_METRICS_ENABLE",
                "title": "Metrics integration enable",
                "default": true
              },
              "sparkMetricsEnable": {
                "description": "Whether or not enable Spark metrics by default. Spark metrics can be configured later at workflow/automl level",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_METRICS_ENABLE",
                "title": "Spark Metrics enabled",
                "default": false
              },
              "prometheusMetricsEnable": {
                "description": "Allow metrics to be sent to Prometheus",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "PROMETHEUS_METRICS_ENABLE",
                "title": "Use Prometheus metrics",
                "default": true
              },
              "jmxMetricsEnable": {
                "description": "Allow JMX client application to monitor Rocket and be able to send metrics through an HTTP server",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "JMX_METRICS_ENABLE",
                "title": "Use JMX Metrics server",
                "default": false
              }
            },
            "required": []
          },
          "custom": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "custom",
            "title": "Custom",
            "description": "Parameters custom",
            "properties": {
              "sparkExtraConfig": {
                "description": "SPARK_EXTRA_CONFIG_spark_sql_sources_disabledJdbcConnProviderList",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_EXTRA_CONFIG_spark_sql_sources_disabledJdbcConnProviderList",
                "title": "SPARK_EXTRA_CONFIG_spark_sql_sources_disabledJdbcConnProviderList",
                "default": "mssql"
              },
              "gosecSpartaLogLevel": {
                "description": "Log level of the sparta gosec.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "GOSEC_SPARTA_LOG_LEVEL",
                "title": "Sparta GoSec log level",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "WARN",
                  "ERROR",
                  "FATAL"
                ],
                "default": "ERROR"
              },
              "awsS3CredentialsVaultPath": {
                "description": "Vault path where credentials (accessKey and secretKey) are located",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_SECURITY_S3_SECRETS_VAULT_PATH",
                "title": "Credentials vault path (access and secrey key)"
              },
              "apiMaxFileSizeFileBrowserUpload": {
                "description": "Defines the maximum size for uploading files to Rocket file browser.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_API_MAX_FILE_SIZE_UPLOAD_FILEBROWSER",
                "title": "Maximum size for uploading files to Rocket file browser",
                "default": "5g"
              },
              "SpartaApiLogRequestMode": {
                "description": "SPARTA_API_LOG_REQUEST_MODE",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_API_LOG_REQUEST_MODE",
                "title": "SPARTA_API_LOG_REQUEST_MODE",
                "default": "partial"
              },
              "SpartaApiLogRequestEnabled": {
                "description": "SPARTA_API_LOG_REQUEST_ENABLED",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_API_LOG_REQUEST_ENABLED",
                "title": "SPARTA_API_LOG_REQUEST_ENABLED",
                "default": true
              },
              "SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_rawbp_dfs_core_windows_net": {
                "description": "SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_rawbp_dfs_core_windows_net",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_rawbp_dfs_core_windows_net",
                "title": "SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_rawbp_dfs_core_windows_net",
                "default": "https://login.microsoftonline.com/f5b0d682-1497-4db0-9019-660035554e72/oauth2/token"
              },
              "SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_curbp_dfs_core_windows_net": {
                "description": "SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_curbp_dfs_core_windows_net",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_curbp_dfs_core_windows_net",
                "title": "SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_curbp_dfs_core_windows_net",
                "default": "https://login.microsoftonline.com/f5b0d682-1497-4db0-9019-660035554e72/oauth2/token"
              },
              "SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_masterbp_dfs_core_windows_net": {
                "description": "SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_masterbp_dfs_core_windows_net",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_masterbp_dfs_core_windows_net",
                "title": "SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_masterbp_dfs_core_windows_net",
                "default": "https://login.microsoftonline.com/f5b0d682-1497-4db0-9019-660035554e72/oauth2/token"
              },
              "WORKFLOWS_SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_rawbp_dfs_core_windows_net": {
                "description": "WORKFLOWS_SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_rawbp_dfs_core_windows_net",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "WORKFLOWS_SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_rawbp_dfs_core_windows_net",
                "title": "WORKFLOWS_SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_rawbp_dfs_core_windows_net",
                "default": "https://login.microsoftonline.com/f5b0d682-1497-4db0-9019-660035554e72/oauth2/token"
              },
              "WORKFLOWS_SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_curbp_dfs_core_windows_net": {
                "description": "WORKFLOWS_SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_curbp_dfs_core_windows_net",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "WORKFLOWS_SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_curbp_dfs_core_windows_net",
                "title": "WORKFLOWS_SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_curbp_dfs_core_windows_net",
                "default": "https://login.microsoftonline.com/f5b0d682-1497-4db0-9019-660035554e72/oauth2/token"
              },
              "WORKFLOWS_SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_masterbp_dfs_core_windows_net": {
                "description": "WORKFLOWS_SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_masterbp_dfs_core_windows_net",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "WORKFLOWS_SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_masterbp_dfs_core_windows_net",
                "title": "WORKFLOWS_SPARK_EXTRA_CONFIG_spark_hadoop_fs_azure_account_oauth2_client_endpoint_masterbp_dfs_core_windows_net",
                "default": "https://login.microsoftonline.com/f5b0d682-1497-4db0-9019-660035554e72/oauth2/token"
              },
              "SPARK_SECURITY_ADLS2_ACCOUNT_NAME_MASTERBP": {
                "description": "SPARK_SECURITY_ADLS2_ACCOUNT_NAME_MASTERBP",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_SECURITY_ADLS2_ACCOUNT_NAME_MASTERBP",
                "title": "SPARK_SECURITY_ADLS2_ACCOUNT_NAME_MASTERBP",
                "default": "masterbp"
              },
              "SPARK_SECURITY_ADLS2_ACCOUNT_NAME_RAWBP": {
                "description": "SPARK_SECURITY_ADLS2_ACCOUNT_NAME_RAWBP",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_SECURITY_ADLS2_ACCOUNT_NAME_RAWBP",
                "title": "SPARK_SECURITY_ADLS2_ACCOUNT_NAME_RAWBP",
                "default": "rawbp"
              },
              "SPARK_SECURITY_ADLS2_ACCOUNT_NAME_CURBP": {
                "description": "SPARK_SECURITY_ADLS2_ACCOUNT_NAME_CURBP",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_SECURITY_ADLS2_ACCOUNT_NAME_CURBP",
                "title": "SPARK_SECURITY_ADLS2_ACCOUNT_NAME_CURBP",
                "default": "curbp"
              },
              "SPARK_HADOOP_ADLS2_DIRECTORY_NAME_MASTERBP": {
                "description": "SPARK_HADOOP_ADLS2_DIRECTORY_NAME_MASTERBP",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_HADOOP_ADLS2_DIRECTORY_NAME_MASTERBP",
                "title": "SPARK_HADOOP_ADLS2_DIRECTORY_NAME_MASTERBP",
                "default": "f5b0d682-1497-4db0-9019-660035554e72"
              },
              "SPARK_HADOOP_ADLS2_DIRECTORY_NAME_RAWBP": {
                "description": "SPARK_HADOOP_ADLS2_DIRECTORY_NAME_RAWBP",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_HADOOP_ADLS2_DIRECTORY_NAME_RAWBP",
                "title": "SPARK_HADOOP_ADLS2_DIRECTORY_NAME_RAWBP",
                "default": "f5b0d682-1497-4db0-9019-660035554e72"
              },
              "SPARK_HADOOP_ADLS2_DIRECTORY_NAME_CURBP": {
                "description": "SPARK_HADOOP_ADLS2_DIRECTORY_NAME_CURBP",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_HADOOP_ADLS2_DIRECTORY_NAME_CURBP",
                "title": "SPARK_HADOOP_ADLS2_DIRECTORY_NAME_CURBP",
                "default": "f5b0d682-1497-4db0-9019-660035554e72"
              }
            },
            "required": []
          }
        },
        "required": []
      },
      "settings": {
        "type": "object",
        "additionalProperties": false,
        "ui": {
          "component": "standard"
        },
        "name": "settings",
        "title": "Settings",
        "description": "In this tab you can configure the general configuration of a Rocket cluster.",
        "properties": {
          "postgresEnableHealthCheck": {
            "description": "Enables Postgres health check for server and default value for asset executions.",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_HEALTH_CHECK_INCLUDE_POSTGRES",
            "title": "Postgres health check enabled",
            "default": true
          },
          "hadoopEnableHealthCheck": {
            "description": "Enables HDFS health check for server and default value for asset executions.",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_HEALTH_CHECK_INCLUDE_HDFS",
            "title": "HDFS health check enabled",
            "default": true
          },
          "sparkEnableHealthCheck": {
            "description": "Enables Spark health check for asset executions.",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_HEALTH_CHECK_INCLUDE_SPARK",
            "title": "Spark health check enabled",
            "default": true
          },
          "allowDeployOnLocalMode": {
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_ALLOW_DEPLOY_ON_LOCAL_MODE",
            "ui": {
              "updatable": true
            },
            "title": "Allow to deploy assets in local mode",
            "default": false
          },
          "apiMaxFileSizeUpload": {
            "description": "Defines the maximum size for uploading files to Rocket (e.g. Plugins).",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_API_MAX_FILE_SIZE_UPLOAD",
            "title": "Maximum size for uploading files to Rocket",
            "default": "256m"
          },
          "apiMaxFileSizeImportExport": {
            "description": "Defines the maximum size for import/export endpoints.",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_API_MAX_FILE_SIZE_IMPORT_EXPORT",
            "title": "Maximum size for import/export endpoints",
            "default": "5g"
          },
          "apiMaxFileSizeMlModels": {
            "description": "Defines the maximum size for MLModel serializations endpoints.",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "INTELLIGENCE_MLMODELS_API_MAX_FILE_SIZE",
            "title": "Maximum size for MLModel serializations endpoints",
            "default": "5g"
          },
          "spartaTimeoutApiCalls": {
            "description": "Timeout when call any API in Rocket service",
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_TIMEOUT_API_CALLS",
            "title": "Timeout API calls (seconds)",
            "default": 40
          },
          "spartaTimeoutBlockingIOApiCalls": {
            "description": "Timeout for blocking IO endpoints in Rocket API. Should be equal or higher than SPARTA_TIMEOUT_API_CALLS",
            "type": "integer",
            "minimum": 1,
            "maximum": 600,
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_TIMEOUT_API_CALLS_BLOCKING_IO",
            "title": "Timeout blocking IO API calls (seconds)",
            "default": 180
          },
          "dashboardPollingInterval": {
            "description": "Time (in ms) that the frontend waits before checking for updates in the dashboard",
            "type": "integer",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "DASHBOARD_POLLING_INTERVAL",
            "title": "Dashboard polling interval",
            "default": 10000
          },
          "assetsInProjectPollingInterval": {
            "description": "Time (in ms) that the frontend waits before checking for new assets in a project",
            "type": "integer",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "ASSETS_IN_PROJECT_POLLING_INTERVAL",
            "title": "Assets in project polling interval",
            "default": 15000
          },
          "executionsInProjectPollingInterval": {
            "description": "Time (in ms) that the frontend waits before checking for new executions in a project",
            "type": "integer",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "EXECUTIONS_IN_PROJECT_POLLING_INTERVAL",
            "title": "Executions in project polling interval",
            "default": 10000
          },
          "executionDetailPollingInterval": {
            "description": "Time (in ms) that the frontend waits before checking for updates in a single execution",
            "type": "integer",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "EXECUTION_DETAIL_POLLING_INTERVAL",
            "title": "Execution detail polling interval",
            "default": 7000
          },
          "sidebarPollingInterval": {
            "description": "Time (in ms) that the frontend waits before checking for updates in the sidebar",
            "type": "integer",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SIDEBAR_POLLING_INTERVAL",
            "title": "Sidebar polling interval",
            "default": 10000
          },
          "debugPollingInterval": {
            "description": "Time (in ms) that the frontend waits before checking for updates in a debugging execution",
            "type": "integer",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "DEBUG_POLLING_INTERVAL",
            "title": "Debugging polling interval",
            "default": 5000
          },
          "spartaWorkflowSchedulerDelay": {
            "description": "Timespan given between every check executed by the workflow scheduler",
            "type": "integer",
            "minimum": 1,
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_WORKFLOW_SCHEDULER_DELAY",
            "title": "Rocket workflow scheduler delay (seconds)",
            "default": 120
          },
          "spartaWorkflowSchedulerInitialDelay": {
            "description": "Timespan given for initial check executed by the workflow scheduler",
            "type": "integer",
            "minimum": 1,
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_WORKFLOW_SCHEDULER_INITIAL_DELAY",
            "title": "Rocket workflow scheduler initial delay (seconds)",
            "default": 240
          },
          "spartaWorkflowSchedulerBatchSize": {
            "description": "Maximum number of tasks to schedule for each interval. 0 means unlimited",
            "type": "integer",
            "minimum": 0,
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_WORKFLOW_SCHEDULER_BATCH_SIZE",
            "title": "Rocket workflow scheduler batch size",
            "default": 30000
          },
          "spartaWorkflowSchedulerSyncBlockingEnabled": {
            "description": "Enabled blocking actor in sync scheduled tasks",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_WORKFLOW_SCHEDULER_SYNC_BLOCKING_ENABLED",
            "title": "Enabled blocking actor in sync scheduled tasks",
            "default": true
          },
          "spartaWorkflowSchedulerSyncBlockingTimeout": {
            "description": "Set a timeout for blocking actor in sync scheduled tasks",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_WORKFLOW_SCHEDULER_SYNC_BLOCKING_TIMEOUT",
            "title": "Set a timeout for blocking actor in sync scheduled tasks",
            "default": "120 seconds"
          },
          "spartaWorkflowSchedulerLaunchTimeout": {
            "description": "Set a timeout for launching the execution of scheduled tasks",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_WORKFLOW_SCHEDULER_LAUNCH_TIMEOUT",
            "title": "Set a timeout for launching the execution of scheduled tasks",
            "default": "60 seconds"
          },
          "spartaCheckConsistency": {
            "description": "Defines how often should be checked eventual inconsistencies between the Status in Rocket and the workflows actually deployed or deploying in platform",
            "type": "string",
            "minimum": 1,
            "maximum": 100,
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_ORCHESTRATOR_CHECK_CONSISTENCY_INTERVAL",
            "title": "Consistency check interval",
            "default": "3m"
          },
          "spartaSchedulerStopMaxCount": {
            "description": "Maximum number of times Rocket will check on a execution with inconsistent state between the database and K8S(that is if the execution appears as Stopped in K8S but not in the database), if the threshold is reached the execution state will be automatically set to Stopped in database.",
            "type": "integer",
            "required": false,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "SPARTA_SCHEDULER_STOP_MAX_COUNT",
            "title": "Rocket scheduler stopper max count",
            "default": 3
          },
          "spartaExecutionsCleanerEnabled": {
            "description": "Enable auto-delete of older executions",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_DB_CLEANER_EXECUTIONS_AUTO_DELETE_ENABLED",
            "ui": {
              "updatable": true
            },
            "title": "Enable auto-delete of older executions",
            "default": false
          },
          "spartaExecutionsCleaner": {
            "description": "Defines how often finished executions should be deleted",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_DB_CLEANER_EXECUTIONS",
            "title": "Delete finished executions interval",
            "default": "30d",
            "ui": {
              "visible": {
                "spartaExecutionsCleanerEnabled": true
              }
            }
          },
          "spartaExecutionsArchiveEnabled": {
            "description": "Enable auto-archive of older executions",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_DB_CLEANER_EXECUTIONS_AUTO_ARCHIVE_ENABLED",
            "ui": {
              "updatable": true
            },
            "title": "Enable auto-archive of older executions",
            "default": true
          },
          "spartaExecutionsArchive": {
            "description": "Defines how often finished executions should be archived",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_DB_CLEANER_EXECUTIONS_ARCHIVE",
            "title": "Archive finished executions interval",
            "default": "14d",
            "ui": {
              "visible": {
                "spartaExecutionsArchiveEnabled": true
              }
            }
          },
          "spartaExecutionsDeleteArchivedEnabled": {
            "description": "Enable auto-delete archived executions",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_DB_CLEANER_EXECUTIONS_AUTO_DELETE_ARCHIVE_ENABLED",
            "ui": {
              "updatable": true
            },
            "title": "Enable auto-delete archived executions",
            "default": true
          },
          "spartaExecutionsDeleteArchive": {
            "description": "Defines how often finished executions should be archived",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_DB_CLEANER_EXECUTIONS_DELETE_ARCHIVE",
            "title": "Delete archived and finished executions interval",
            "default": "365d",
            "ui": {
              "visible": {
                "spartaExecutionsDeleteArchivedEnabled": true
              }
            }
          },
          "spartaAutoBackupCleanerEnabled": {
            "description": "Enable auto-delete of older auto-backups",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "ROCKET_CLEANER_AUTOBACKUP_ENABLED",
            "ui": {
              "updatable": true
            },
            "title": "Enable auto-delete of older auto-backups",
            "default": true
          },
          "spartaAutoBackupCleaner": {
            "description": "Defines how often auto-backups should be deleted",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "ROCKET_CLEANER_AUTOBACKUP",
            "title": "Delete old auto-backups interval",
            "default": "14d",
            "ui": {
              "visible": {
                "spartaAutoBackupCleanerEnabled": true
              }
            }
          },
          "spartaActivityCleaner": {
            "description": "Defines how often should be deleted project activity",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_DB_CLEANER_ACTIVITY",
            "title": "Delete activity interval",
            "default": "7d"
          },
          "spartaScheduledExecutionsCleaner": {
            "description": "Defines how often project scheduled executions should be deleted",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_DB_CLEANER_SCHEDULED_EXECUTIONS",
            "title": "Delete scheduled executions interval",
            "default": "7d"
          },
          "executionsQueueCheckInterval": {
            "description": "Defines how often should be checked the executions queue in order to deploy queued executions. Expressed in seconds.",
            "type": "integer",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_EXECUTIONS_QUEUE_CHECK_INTERVAL",
            "title": "Executions queue check interval",
            "default": 60
          },
          "executionsQueueCheckTimeout": {
            "description": "Timeout when check execution resources in project when dequeue",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_EXECUTIONS_QUEUE_CHECK_RESOURCES_TIMEOUT",
            "title": "Execution queue resources check timeout",
            "default": "60 seconds"
          },
          "executionsQueueSyncInterval": {
            "description": "Defines how often should be synchronized the executions queue with the statuses stored in database. Expressed in seconds.",
            "type": "integer",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_EXECUTIONS_QUEUE_SYNC_INTERVAL",
            "title": "Executions queue synchronize interval",
            "default": 60
          },
          "executionsQueueSyncBatchSize": {
            "description": "Defines the number of queued executions should be synchronized with the statuses stored in database",
            "type": "integer",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_EXECUTIONS_QUEUE_SYNC_BATCH_SIZE",
            "title": "Executions queue synchronize batch size",
            "default": 10
          },
          "executionsQueueSyncTimeout": {
            "description": "Timeout when synchronize executions stored in database",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_EXECUTIONS_QUEUE_SYNC_TIMEOUT",
            "title": "Execution queue synchronize timeout",
            "default": "60 seconds"
          },
          "executionsQueueMaxElements": {
            "description": "Defines a default for the maximum number of equal (same assetVersion Id and same paramters) executions in the queue in each project.",
            "type": "integer",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_EXECUTIONS_QUEUE_MAX_EQUAL_EXECUTIONS",
            "title": "Maximum number of equal executions in execution queue (0 = no limit)",
            "default": 0
          },
          "enableExportCatalogResultAsFile": {
            "description": "Defines if users are allowed to export query results as file.",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_EXPORT_AS_FILE_ENABLED",
            "title": "Enable export catalog results as file",
            "default": true
          },
          "limitDisplayedNotifications": {
            "description": "Defines the maximum number of notifications displayed to the user",
            "type": "integer",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_CONFIG_LIMIT_DISPLAYED_NOTIFICATIONS",
            "title": "Maximum of displayed notifications",
            "default": 100
          },
          "activityEnable": {
            "description": "Whether or not generate activity data.",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "updatable": true,
            "level": 1,
            "internalName": "SPARTA_CONFIG_ACTIVITY_ENABLE",
            "title": "Activity enabled",
            "default": true
          },
          "maxOpenFiles": {
            "description": "Maximum number of files opened (JAVA).",
            "type": "integer",
            "minimum": 1,
            "required": false,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "MAX_OPEN_FILES",
            "title": "Max open files",
            "default": 65535
          },
          "appsMenuStratio": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "switch"
            },
            "name": "appsMenuStratio",
            "title": "Stratio apps menu",
            "description": "",
            "properties": {
              "appsMenuStratioEnabled": {
                "description": "Whether or not enable the unified Stratio apps menu.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "STRATIO_MENU_ENABLED",
                "title": "Enable Stratio apps menu",
                "default": true
              },
              "appsMenuUrl": {
                "description": "Apps menu URL",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "STRATIO_MENU_URL",
                "examples": [
                  "https://admin.k8s.zero.labs.stratio.com/stratio-panel-ui/"
                ],
                "default": "https://${admin_fqdn}/stratio-panel-ui/",
                "title": "Stratio apps menu URL"
              },
              "appsMenuFilename": {
                "description": "Apps menu filename",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "STRATIO_MENU_FILE_NAME",
                "default": "app-menu.js",
                "title": "Stratio apps menu filename"
              }
            },
            "required": []
          },
          "akkacluster": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "standard"
            },
            "name": "akkacluster",
            "title": "Rocket cluster",
            "description": "Akka Cluster properties to support HA in Rocket.",
            "properties": {
              "discoveryMethod": {
                "description": "Type of discovery method to use",
                "type": "string",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 2,
                "default": "kubernetes-api",
                "internalName": "AKKA_DISCOVERY_METHOD_V2",
                "ui": {
                  "updatable": true
                },
                "title": "Akka cluster discovery method"
              },
              "akkaNamespace": {
                "description": "Akka namespace",
                "type": "string",
                "minimum": 1,
                "required": true,
                "readOnly": true,
                "application": false,
                "level": 2,
                "internalName": "AKKA_DISCOVERY_KUBERNETES_POD_NAMESPACE",
                "ui": {
                  "updatable": false
                },
                "title": "Akka namespace",
                "default": "${k8sNamespace}"
              },
              "akkaClusterServiceName": {
                "description": "Cluster service name",
                "type": "string",
                "required": true,
                "readOnly": false,
                "level": 2,
                "ui": {
                  "updatable": false
                },
                "application": false,
                "internalName": "AKKA_CLUSTER_BOOTSTRAP_SERVICE_NAME",
                "title": "Cluster service name",
                "default": "${Application.name}"
              },
              "podLabelSelector": {
                "description": "Label selector",
                "type": "string",
                "required": true,
                "readOnly": false,
                "level": 2,
                "ui": {
                  "updatable": false
                },
                "application": false,
                "internalName": "AKKA_DISCOVERY_KUBERNETES_POD_LABEL_SELECTOR",
                "title": "Label selector",
                "default": "rocket.stratio.com/akka-cluster=%s"
              },
              "akkaPodDomain": {
                "description": "Akka pod domain. Usually the value is similar to this k8s.xxx.labs.stratio.com",
                "type": "string",
                "minimum": 1,
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "AKKA_DISCOVERY_KUBERNETES_POD_DOMAIN",
                "default": "${eos.internalDomain}",
                "examples": [
                  "cluster.local",
                  "k8s.xxx.labs.stratio.com"
                ],
                "ui": {
                  "updatable": false
                },
                "title": "Akka kubernetes pod domain"
              },
              "akkaMinNumber": {
                "description": "Set the minimum number of required members to start the cluster.",
                "type": "integer",
                "minimum": 1,
                "maximum": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_AKKA_MIN_NUMBER",
                "title": "Minimum number of required members to start the cluster",
                "default": 1
              },
              "akkaMinRoleNumber": {
                "description": "Set the minimum number of required members of a role to start the cluster.",
                "type": "integer",
                "minimum": 1,
                "maximum": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_AKKA_MIN_ROLE_NUMBER",
                "title": "Minimum number of required members of a role to start the cluster",
                "default": "${akkaMinNumber}"
              },
              "akkaHttpPoolIdleTimeout": {
                "description": "Akka http host connection pool idle timeout",
                "type": "string",
                "maxLength": 100,
                "minLength": 1,
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_AKKA_HTTP_POOL_IDLE_TIMEOUT",
                "title": "Akka http host connection pool idle timeout",
                "default": "120s"
              },
              "akkaHttpClientIdleTimeout": {
                "description": "Akka http client connection idle timeout",
                "type": "string",
                "maxLength": 100,
                "minLength": 1,
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_AKKA_HTTP_CLIENT_IDLE_TIMEOUT",
                "title": "Akka http client connection idle timeout",
                "default": "120s"
              },
              "akkaSeedTimeout": {
                "description": "Node timeout for contacting seed nodes and therefore joining the cluster.",
                "type": "string",
                "maxLength": 100,
                "minLength": 1,
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_AKKA_SEED_TIMEOUT",
                "title": "Maximum waiting time for nodes to join the cluster",
                "default": "20s"
              },
              "akkaGracePeriods": {
                "description": "Shutdown the cluster if joining the seed nodes takes more than X seconds.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_AKKA_GRACEPERIODS_SECONDS",
                "title": "Shutdown the cluster if joining the seed nodes takes more than X seconds",
                "default": "240s"
              }
            },
            "required": [
              "akkaNamespace",
              "akkaClusterServiceName",
              "podLabelSelector",
              "akkaSeedTimeout"
            ]
          },
          "cleanUpK8sConfig": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "standard"
            },
            "name": "cleanUpK8sConfig",
            "title": "Asset executions clean up",
            "description": "Kubernetes properties to handle executions clean up.",
            "properties": {
              "deleteExecutorsOnTermination": {
                "description": "Whether or not delete executor pod when it terminates. If disabled, the pod will be alive until the execution job will have been deleted (manually or when its TTL is over) ",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "KUBERNETES_DELETE_EXECUTOR_ON_TERMINATION",
                "title": "Delete Spark executor pod on termination",
                "default": false
              },
              "executionPodsTTLSecondsAfterFinished": {
                "description": "The pods associated to an asset execution (workflow, automl and mlproject) are cleaned up TTL seconds after the execution has finished.",
                "type": "integer",
                "minimum": 10,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "KUBERNETES_TTL_SECONDS_AFTER_FINISHED",
                "title": "Finished jobs cleanup TTL",
                "default": 600
              }
            },
            "required": []
          },
          "intelligenceJupyterHubUrl": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "switch"
            },
            "name": "intelligenceJupyterHubUrl",
            "title": "Integration with Intelligence",
            "description": "",
            "properties": {
              "intelligenceJupyterHubUrlEnabled": {
                "description": "Whether or not enable the integration with Intelligence multiuser.",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": true,
                "level": 1,
                "internalName": "IJH_ENABLED",
                "title": "Integration with Intelligence",
                "default": false
              },
              "url": {
                "description": "Intelligence external URL. Make sure that intelligence has been deployed with the same MarathonLB virtual host as Rocket",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "INTELLIGENCE_JUPYTERHUB_URL",
                "examples": [
                  "https://intelligencerocket.keos/intelligencerocket"
                ],
                "title": "Intelligence external URL"
              }
            },
            "required": []
          },
          "modelsMicroservices": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "switch"
            },
            "name": "modelsMicroservices",
            "title": "Configuration for deploy models as microservice",
            "description": "",
            "properties": {
              "mlMicroservicesImage": {
                "description": "Machine Learning Models Prediction server docker image where mleap and rocketAutoMl serialization models managed by Stratio Rocket will be deployed to be exploited",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "INTELLIGENCE_MLMODELS_DEFAULT_MLEAP_DOCKER_IMAGE",
                "title": "Models Prediction Server microservice docker image",
                "default": "${eos.dockerRegistry}/rocket-mleap-microservice:3.1.1"
              },
              "mlMicroserviceMlFlowImage": {
                "description": "Machine Learning Models Prediction server docker image where MlFlow serialization models managed by Stratio Rocket will be deployed to be exploited",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "INTELLIGENCE_MLMODELS_DEFAULT_MLFLOW_DOCKER_IMAGE",
                "title": "MlFlow Models Prediction Server microservice docker image",
                "default": "${eos.dockerRegistry}/rocket-mlflow-microservice:3.1.1"
              }
            },
            "required": []
          },
          "governanceIntegration": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "switch"
            },
            "name": "governanceIntegration",
            "title": "Governance integration",
            "description": "Properties needed for Governance lineage and data quality integration",
            "properties": {
              "lineageEnable": {
                "description": "Whether or not enable the Stratio Governance Lineage.",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "LINEAGE_ENABLE",
                "ui": {
                  "updatable": true
                },
                "title": "Governance Lineage",
                "default": false
              },
              "lineageHttpRequestUri": {
                "description": "URI pointing to the Lineage API. Constructed following the format: <service-name>.<directory-where-is-allocated>.<mesos-dns>:<port>/dictionary",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "LINEAGE_HTTP_REQUEST_URI",
                "title": "Stratio Governance API URI",
                "default": "https://dg-businessglossary-api.keos-core:60000/dictionary"
              },
              "lineagePostPutEndpoint": {
                "description": "Lineage POST and PUT endpoint",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "LINEAGE_POST_PUT_ENDPOINT",
                "ui": {
                  "updatable": true
                },
                "title": "Lineage POST/PUT endpoint",
                "default": "user/lineage/v1/actor"
              },
              "lineageGetEndpoint": {
                "description": "Lineage GET endpoint to retrieve the workflow executionId.",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "LINEAGE_GET_ENDPOINT",
                "ui": {
                  "updatable": true
                },
                "title": "Data quality rules POST endpoint",
                "default": "user/lineage/v1/actor/searchByTransactionId?transactionId="
              },
              "crossdataCatalogGovernanceUri": {
                "description": "URI to reach the Data Governance API in order to retrieve governed collections",
                "type": "string",
                "maxLength": 500,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "CROSSDATA_GOVERNANCE_URI",
                "title": "Data Governance URI ",
                "default": "https://dg-businessglossary-api.keos-core:60000/dictionary/user/catalog/v1/dataAsset/searchByMetadataPathLikeAndSubtypeIn?"
              },
              "crossdataCatalogGovernancePost": {
                "description": "Data Governance API endpoint for retrieving data asset types of governed collections",
                "type": "string",
                "maxLength": 500,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "CROSSDATA_GOVERNANCE_URI_POST",
                "title": "Data Governance URI for dataAssets",
                "default": "https://dg-businessglossary-api.keos-core:60000/dictionary/user/catalog/v1/dataAsset"
              },
              "qualityRulePostEndpoint": {
                "description": "Governance POST endpoint where to send quality rules results",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "QUALITY_RULE_POST_ENDPOINT",
                "ui": {
                  "updatable": true
                },
                "title": "Data quality rules POST endpoint",
                "default": "user/quality/v1/metrics/bulk"
              },
              "qualityRuleExecutionResultsPostEndpoint": {
                "description": "Governance POST endpoint to send quality rule execution results for notification management. Remove '/bulk' if Governance version is < 1.11",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "QUALITY_RULE_EXECUTION_ENDPOINT",
                "ui": {
                  "updatable": true
                },
                "title": "Governance POST endpoint to send quality rule execution results for notification management. Remove '/bulk' if Governance version is < 1.11",
                "default": "user/automation/v1/qrExecution/bulk"
              },
              "qualityRuleGetEndpoint": {
                "description": "Governance GET endpoint from where the application can retrieve its reactive quality rules. For Governance versions lower than 1.11 only version 'v1' is supported.",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "QUALITY_RULE_GET_ENDPOINT",
                "ui": {
                  "updatable": true
                },
                "title": "Data quality reactive rules GET endpoint. For Governance versions lower than 1.11 only version 'v1' is supported.",
                "default": "user/quality/v2/quality/searchReactiveByMetadataPathLike?metadataPathLike="
              },
              "xdQualityRuleGetEndpoint": {
                "description": "Governance GET endpoint from where the application can retrieve XD related quality rules",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "QUALITY_RULE_GET_XD_ENDPOINT",
                "ui": {
                  "updatable": true
                },
                "title": "Crossdata reactive quality rules GET endpoint",
                "default": "user/quality/v2/quality/searchReactiveFederationByMetadataPathLike?federated=true&specific=true&metadataPathLike="
              },
              "plannedQrEnable": {
                "description": "Enable retrieving Proactive Quality Rules",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_SCHEDULING_PLANNED_QUALITY_RULES",
                "ui": {
                  "updatable": true
                },
                "title": "Enable proactive quality rules scheduling",
                "default": false
              },
              "plannedQrEnableRefresh": {
                "description": "Enable refresh collections. Set to true if and only if Stratio Governance version is <= 1.4. Otherwise leave to false",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "QUALITY_RULES_AUTO_REFRESH_EXTENDED_COLLECTIONS",
                "ui": {
                  "updatable": true
                },
                "title": "Enable refresh collections. Set to true if and only if Stratio Governance version is <= 1.4",
                "default": false
              },
              "plannedQrEnableWorkflowRefresh": {
                "description": "Enable refresh collections. Set to true if and only if Stratio Governance version is <= 1.4. Otherwise leave to false",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_EXTRA_QUALITY_RULES_AUTO_REFRESH_EXTENDED_COLLECTIONS",
                "ui": {
                  "updatable": true
                },
                "title": "Enable refresh collections. Set to true if and only if Stratio Governance version is <= 1.4",
                "default": "${plannedQrEnableRefresh}"
              },
              "plannedQualityRuleRetrievalPeriod": {
                "description": "Period of time between every attempt to retrieve planned quality rules from Governance",
                "type": "integer",
                "minimum": 1,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "PLANNED_QUALITY_RULE_RETRIEVAL_PERIOD",
                "ui": {
                  "visible": {
                    "plannedQrEnable": true
                  }
                },
                "title": "Interval of time between every retrieval attempt from Governance (in ms)",
                "default": 60000
              },
              "plannedQualityRuleGetEndpoint": {
                "description": "Governance GET endpoint from where the application can retrieve its proactive quality rules. For Governance versions lower than 1.11 only version 'v1' is supported.",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "PLANNED_QUALITY_RULE_GET_ENDPOINT",
                "ui": {
                  "updatable": true
                },
                "title": "Data quality proactive rules GET endpoint. For Governance versions lower than 1.11 only version 'v1' is supported.",
                "default": "user/quality/v2/quality/searchProactiveByModifiedAt?sort=modified_at,id,asc&modifiedAt="
              },
              "customJdbcLineageAndQrsMethods": {
                "description": "Custom methods used for JDBC datasources in order to implement the compatibility with Governance lineage and quality rules. They have more priority than custom Spark format using 'jdbc' key. The value must follow the syntax of comma-separated tuples of three elements key:object:method. i.e. org.postgresql.Driver:com.stratio.connectors.MyJDBCConnector:getGovernanceData. Note that this property can override the default Rocket implementation for supported JDBCs like oracle.jdbc.driver.OracleDriver, org.postgresql.Driver, com.ibm.db2.jcc.DB2Driver, com.mysql.jdbc.Driver...",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "CUSTOM_LINEAGE_AND_QRS_JDBC_DRIVER_METHODS",
                "ui": {
                  "updatable": true
                },
                "title": "Custom lineage and quality rules methods using JDBC driver",
                "default": ""
              },
              "customSparkLineageAndQrsMethods": {
                "description": "Custom methods used for spark format datasources in order to implement the compatibility with Governance lineage and quality rules, they have more priority than the custom lineage. This value must be composed of comma-separated tuples of three elements key:object:method. i.e. csv:com.stratio.connectors.MySparkCsvConnector:getGovernanceData. Note that this property can override the default Rocket implementation for supported datasources like json, csv, parquet, mongodb...",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "CUSTOM_LINEAGE_AND_QRS_SPARK_FORMAT_METHODS",
                "ui": {
                  "updatable": true
                },
                "title": "Custom lineage and quality rules methods using Spark format",
                "default": ""
              },
              "customLineageAndQrsMethods": {
                "description": "Custom methods used to implement compatibility with lineage and quality rules. This value must be composed of comma-separated tuples of three elements key:object:method. i.e. myconnector:com.stratio.connectors.MyConnector:getGovernanceData. This property enables lineage and QRs execution even for those connectors which are not supported yet, just by specifying this key in 'lineage_custom' property or in the SDK custom step implementation",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "CUSTOM_LINEAGE_AND_QRS_METHODS",
                "ui": {
                  "updatable": true
                },
                "title": "Custom lineage and quality rules methods",
                "default": ""
              },
              "customPlannedQrsMethods": {
                "description": "Custom methods used to implement compatibility with planned quality rules. This value must be composed of comma-separated tuples of three elements key:object:method. i.e. myconnector:com.stratio.connectors.MyConnector:getGovernanceData. This property enables the execution of Planned QRs even for those connectors which are not fully supported yet.",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "CUSTOM_PLANNED_QRS_METHODS",
                "ui": {
                  "updatable": true
                },
                "title": "Custom planned quality rules methods",
                "default": ""
              }
            },
            "required": []
          },
          "rocketCiCdIntegration": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "switch"
            },
            "name": "CiCdIntegrationConfig",
            "title": "CI/CD Integration",
            "description": "",
            "properties": {
              "ciCdEnabled": {
                "description": "Whether or not to enable the integration with CI/CD",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ROCKET_CICD_ENABLED",
                "title": "Enable CI/CD integration",
                "default": false
              },
              "cicdUrl": {
                "description": "CI/CD Service URL. e.g. Jenkins",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ROCKET_CICD_JENKINS_URL",
                "examples": [
                  "http://jenkins.cicdcd.tenant1:8080/service/jenkins"
                ],
                "title": "CI/CD base URL e.g. Jenkins"
              },
              "cicdService": {
                "description": "Select a CI/CD Service for Rocket",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ROCKET_CICD_SERVICE",
                "enum": [
                  "Jenkins",
                  "Basic"
                ],
                "title": "CI/CD Service"
              },
              "uploadCicdCredentials": {
                "description": "Upload the following credentials to Vault. ",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "UPLOAD_CICD_JENKINS_VAULT",
                "title": "Upload credentials to Vault",
                "default": false,
                "ui": {
                  "updatable": false
                }
              },
              "userCicdCredentials": {
                "description": "CI/CD username",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": true,
                "level": 1,
                "ui": {
                  "visible": {
                    "uploadCicdCredentials": true
                  }
                },
                "internalName": "ROCKET_CICD_USERNAME",
                "title": "CI/CD username",
                "default": ""
              },
              "passwordCicdCredentials": {
                "description": "CI/CD password",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": true,
                "level": 1,
                "ui": {
                  "visible": {
                    "uploadCicdCredentials": true
                  }
                },
                "internalName": "ROCKET_CICD_PASSWORD",
                "title": "CI/CD password",
                "default": ""
              },
              "cicdMore": {
                "type": "object",
                "additionalProperties": false,
                "ui": {
                  "component": "show-more"
                },
                "name": "cicdMore",
                "title": "",
                "description": "",
                "properties": {
                  "cicdMonitorInterval": {
                    "description": "Set a monitoring interval for ci/cd integration",
                    "type": "string",
                    "minimum": 1,
                    "maximum": 100,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "ROCKET_CICD_MONITOR_INTERVAL",
                    "title": "Set a monitoring interval for ci/cd integration",
                    "default": "60s"
                  },
                  "cicdTimeoutRelease": {
                    "description": "Set a timeout in minutes for a release",
                    "type": "integer",
                    "minimum": 1,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "ROCKET_CICD_DANGLED_MINUTES",
                    "title": "Set a release timeout (m)",
                    "default": 20
                  },
                  "jenkinsTemplatePath": {
                    "description": "Specify the path in which to find Jenkins templates",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "ROCKET_CICD_JENKINS_TEMPLATE_PATH",
                    "title": "Specify the Jenkins templates path",
                    "default": ""
                  },
                  "jenkinsTemplateName": {
                    "description": "Specify a Jenkins template name.",
                    "type": "string",
                    "minimum": 1,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "ROCKET_CICD_JENKINS_TEMPLATE_NAME",
                    "title": "Specify a Jenkins template name",
                    "default": ""
                  }
                },
                "required": []
              }
            },
            "required": []
          },
          "gitIntegration": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "standard"
            },
            "name": "gitIntegration",
            "title": "Git API",
            "description": "Git API properties to integrate MlFlow with Git.",
            "properties": {
              "gitApiDefaultRepositoriesLimit": {
                "description": "Set the maximum number of retrieved repositories when using Git API in MlFlowProjects. A value lower than 1 means unlimited",
                "type": "integer",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "GIT_API_DEFAULT_REPOSITORIES_LIMIT",
                "title": "Maximum number of repositories that can be listed by default",
                "default": 150
              },
              "gitApiDefaultBranchesLimit": {
                "description": "Set the maximum number of retrieved branches when using Git API in MlFlowProjects. A value lower than 1 means unlimited",
                "type": "integer",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "GIT_API_DEFAULT_BRANCHES_LIMIT",
                "title": "Maximum number of branches that can be listed by default",
                "default": 150
              },
              "gitApiDefaultCommitsLimit": {
                "description": "Set the maximum number of retrieved commits when using Git API in MlFlowProjects. A value lower than 1 means unlimited",
                "type": "integer",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "GIT_API_DEFAULT_COMMITS_LIMIT",
                "title": "Maximum number of commits that can be listed by default",
                "default": 50
              },
              "rocketGitVaultIntegrationPrefix": {
                "description": "Defines the prefix of vault path where the projects' Personal Access Token will be stored.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_GIT_INTEGRATION_SECURITY_VAULT_PREFIX",
                "title": "Vault prefix where projects' PAT will be stored",
                "default": "userland/passwords"
              },
              "gitProxyIntegration": {
                "type": "object",
                "additionalProperties": false,
                "ui": {
                  "component": "switch"
                },
                "name": "GitProxyIntegrationConfig",
                "title": "Git Security Proxy Integration",
                "description": "",
                "properties": {
                  "gitApiProxyEnabled": {
                    "description": "Whether or not enable the HTTP Proxy for Git Integration",
                    "type": "boolean",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "GIT_API_PROXY_ENABLE",
                    "title": "Enable HTTP Proxy to Git",
                    "default": false
                  },
                  "gitApiProxyHost": {
                    "description": "Host where HTTP Proxy is configured.",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "GIT_API_PROXY_HOST",
                    "title": "HTTP Proxy host"
                  },
                  "gitApiProxyPort": {
                    "description": "Port to reach HTTP proxy.",
                    "type": "integer",
                    "minimum": 1,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "GIT_API_PROXY_PORT",
                    "title": "HTTP Proxy port",
                    "default": 3128
                  },
                  "gitApiProxyListDomains": {
                    "description": "Comma separated list of domains filtered by proxy.",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "GIT_API_PROXY_LIST_DOMAINS",
                    "examples": [
                      "github,bitbucket,gitlab"
                    ],
                    "ui": {
                      "updatable": true
                    },
                    "title": "List of domains filtered by proxy",
                    "default": "github,bitbucket,gitlab"
                  },
                  "gitApiProxyAuthenticationEnabled": {
                    "description": "This property authenticates the SSH connections when using the HTTP Proxy with Basic Auth Realm.",
                    "type": "boolean",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "GIT_API_PROXY_AUTHENTICATION_ENABLE",
                    "title": "Enable authentication of SSH connections to Git",
                    "default": false
                  },
                  "gitApiProxyAuthenticationVaultPath": {
                    "description": "If authenticated SSH connections is enabled, vault path where credentials (user and password) are located",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "GIT_API_PROXY_AUTHENTICATION_VAULT_PATH",
                    "ui": {
                      "visible": {
                        "gitApiProxyAuthenticationEnabled": true
                      }
                    },
                    "title": "Credentials vault path (user and password) to authenticated SSH connections"
                  }
                },
                "required": []
              }
            }
          },
          "pythonRepositories": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "standard"
            },
            "name": "Python repositories",
            "title": "Python repositories",
            "description": "External Pypi and/or conda repositories configuration",
            "properties": {
              "pypiRepositories": {
                "type": "object",
                "additionalProperties": false,
                "ui": {
                  "component": "accordion"
                },
                "name": "Pypi repositories",
                "title": "Pypi repositories",
                "description": "Tab to configure connection to external Pypi repositories",
                "properties": {
                  "offlineRepo": {
                    "description": "Check to enable offline python repositories management",
                    "type": "boolean",
                    "required": true,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "ROCKET_CONDA_OFFLINE_ENABLED",
                    "title": "Override default PyPI index to work offline",
                    "default": false
                  },
                  "pypiIndexSecurity": {
                    "description": "Whether or not users are required to authenticate with the packages repository.",
                    "type": "boolean",
                    "required": false,
                    "readOnly": false,
                    "application": true,
                    "level": 1,
                    "internalName": "NOT_USED_ROCKET_INDEX_URL_BASIC_AUTH_ENABLED",
                    "title": "Enable authentication through user and password (default PyPI index)",
                    "ui": {
                      "visible": {
                        "offlineRepo": true
                      }
                    },
                    "default": false
                  },
                  "pypiIndexUrl": {
                    "description": "Url of the pypi repository (index-url). Please, replace the default (https://pypi.org/simple) to work offline",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": true,
                    "level": 1,
                    "internalName": "NOT_USED_ROCKET_INDEX_URL",
                    "title": "Default PyPI Index Url",
                    "ui": {
                      "visible": {
                        "offlineRepo": true
                      }
                    },
                    "default": "https://pypi.org/simple",
                    "examples": [
                      "https://nexus.bootstrap.golf.labs.stratio.com/rocket/simple"
                    ]
                  },
                  "pypiIndexVaultPath": {
                    "description": "Vault secret containing the authentication credentials for the PyPI default index.",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": true,
                    "level": 1,
                    "internalName": "NOT_USED_ROCKET_INDEX_URL_VAULT_PATH",
                    "title": "Vault secret (default PyPI index)",
                    "ui": {
                      "visible": {
                        "pypiIndexSecurity": true
                      }
                    },
                    "default": "",
                    "examples": [
                      "pypi"
                    ]
                  },
                  "pypiExtraIndexes": {
                    "type": "object",
                    "additionalProperties": false,
                    "ui": {
                      "component": "standard"
                    },
                    "name": "Pypi extra indexes",
                    "title": "Pypi extra indexes",
                    "description": "Pypi extra indexes",
                    "properties": {
                      "pypiExtraIndexSecurity1": {
                        "description": "Whether or not users are required to authenticate with the packages repository.",
                        "type": "boolean",
                        "required": false,
                        "readOnly": false,
                        "application": true,
                        "level": 1,
                        "internalName": "NOT_USED_ROCKET_INDEX_URL_BASIC_AUTH_ENABLED",
                        "title": "Enable authentication through user and password (extra index 1)",
                        "default": false
                      },
                      "pypiExtraIndexUrl1": {
                        "description": "Url of the PyPI repository (extra-index-url)",
                        "type": "string",
                        "required": false,
                        "readOnly": false,
                        "application": true,
                        "level": 1,
                        "internalName": "NOT_USED_ROCKET_INDEX_URL",
                        "title": "PyPI URL (extra index 1)",
                        "default": "",
                        "examples": [
                          "https://nexus.bootstrap.golf.labs.stratio.com/rocket/simple"
                        ]
                      },
                      "pypiExtraIndexVaultPath1": {
                        "description": "Vault secret containing the authentication credentials for the PyPI extra index 1.",
                        "type": "string",
                        "required": false,
                        "readOnly": false,
                        "application": true,
                        "level": 1,
                        "internalName": "NOT_USED_ROCKET_INDEX_URL_VAULT_PATH",
                        "title": "Vault secret (extra index 1)",
                        "ui": {
                          "visible": {
                            "pypiExtraIndexSecurity1": true
                          }
                        },
                        "default": "",
                        "examples": [
                          "pypi"
                        ]
                      },
                      "pypiExtraIndexSecurity2": {
                        "description": "Whether or not users are required to authenticate with the packages repository.",
                        "type": "boolean",
                        "required": false,
                        "readOnly": false,
                        "application": true,
                        "default": false,
                        "level": 1,
                        "internalName": "NOT_USED_ROCKET_INDEX_URL_BASIC_AUTH_ENABLED",
                        "title": "Enable authentication through user and password (extra index 2)"
                      },
                      "pypiExtraIndexUrl2": {
                        "description": "Url of the PyPI repository (extra-index-url)",
                        "type": "string",
                        "required": false,
                        "readOnly": false,
                        "application": true,
                        "level": 1,
                        "internalName": "NOT_USED_ROCKET_INDEX_URL",
                        "title": "PyPI URL (extra index 2)",
                        "default": "",
                        "examples": [
                          "https://nexus.bootstrap.golf.labs.stratio.com/rocket/simple"
                        ]
                      },
                      "pypiExtraIndexVaultPath2": {
                        "description": "Vault secret containing the authentication credentials for the PyPI extra index 2.",
                        "type": "string",
                        "required": false,
                        "readOnly": false,
                        "application": true,
                        "level": 1,
                        "internalName": "NOT_USED_ROCKET_INDEX_URL_VAULT_PATH",
                        "title": "Vault secret (extra index 2)",
                        "ui": {
                          "visible": {
                            "pypiExtraIndexSecurity2": true
                          }
                        },
                        "default": "",
                        "examples": [
                          "pypi"
                        ]
                      }
                    },
                    "required": []
                  },
                  "pypiExtraIndexUrls": {
                    "description": "Environment variable (csv) with the url of the PyPI repositories",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 2,
                    "internalName": "ROCKET_PIP_EXTRA_REPO_URLS",
                    "title": "Pip Repositories (urls)",
                    "default": "${pypiIndexUrl},${pypiExtraIndexUrl1},${pypiExtraIndexUrl2}"
                  },
                  "pypiExtraIndexVaultPaths": {
                    "description": "Environment variable (csv) with the vault paths containing the secrets of the PyPI repositories",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 2,
                    "internalName": "ROCKET_PIP_EXTRA_REPO_VAULT_PATHS",
                    "title": "Pip Repositories (vault paths)",
                    "default": "${pypiIndexVaultPath},${pypiExtraIndexVaultPath1},${pypiExtraIndexVaultPath2}"
                  }
                },
                "required": []
              },
              "CondaRepositories": {
                "type": "object",
                "additionalProperties": false,
                "ui": {
                  "component": "accordion"
                },
                "name": "Conda repositories",
                "title": "Conda repositories",
                "description": "Tab to configure connection to external Conda repositories",
                "properties": {
                  "condaIndexSecurity1": {
                    "description": "Whether or not users are required to authenticate with the Conda channel 1.",
                    "type": "boolean",
                    "required": false,
                    "readOnly": false,
                    "application": true,
                    "level": 1,
                    "internalName": "NOT_USED_ROCKET_CONDA_INDEX_SECURITY1",
                    "title": "Enable authentication through user and password (conda channel 1)",
                    "default": false
                  },
                  "condaIndexUrl1": {
                    "description": "Url of the conda channel 1.",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": true,
                    "level": 1,
                    "internalName": "NOT_USED_ROCKET_CONDA_INDEX_URL1",
                    "title": "Conda channel URL 1",
                    "default": "",
                    "examples": [
                      "https://nexus.bootstrap.golf.labs.stratio.com/rocket"
                    ]
                  },
                  "condaIndexVaultPath1": {
                    "description": "Vault secret containing the authentication credentials for the conda channel 1.",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": true,
                    "level": 1,
                    "internalName": "NOT_USED_ROCKET_CONDA_INDEX_URL_VAULT_PATH1",
                    "title": "Vault secret conda channel 1",
                    "ui": {
                      "visible": {
                        "condaIndexSecurity1": true
                      }
                    },
                    "default": "",
                    "examples": [
                      "conda"
                    ]
                  },
                  "condaIndexSecurity2": {
                    "description": "Whether or not users are required to authenticate with the Conda channel 2.",
                    "type": "boolean",
                    "required": false,
                    "readOnly": false,
                    "application": true,
                    "level": 1,
                    "internalName": "NOT_USED_ROCKET_EXTRA_CONDA_INDEX_SECURITY2",
                    "title": "Enable authentication through user and password (conda channel 2)",
                    "default": false
                  },
                  "condaIndexUrl2": {
                    "description": "Url of the Conda channel 2",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": true,
                    "level": 1,
                    "internalName": "NOT_USED_ROCKET_EXTRA_CONDA_INDEX_URL2",
                    "title": "Conda channel URL 2",
                    "default": "",
                    "examples": [
                      "https://nexus.bootstrap.golf.labs.stratio.com/rocket"
                    ]
                  },
                  "condaIndexVaultPath2": {
                    "description": "Vault secret containing the authentication credentials for the conda channel 2.",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": true,
                    "level": 1,
                    "internalName": "NOT_USED_ROCKET_EXTRA_CONDA_INDEX_URL_VAULT_PATH",
                    "title": "Vault secret conda channel 2",
                    "ui": {
                      "visible": {
                        "condaIndexSecurity2": true
                      }
                    },
                    "default": "",
                    "examples": [
                      "conda"
                    ]
                  },
                  "condaIndexSecurity3": {
                    "description": "Whether or not users are required to authenticate with the Conda channel 3.",
                    "type": "boolean",
                    "required": false,
                    "readOnly": false,
                    "application": true,
                    "default": false,
                    "level": 1,
                    "internalName": "NOT_USED_ROCKET_EXTRA_CONDA_INDEX_SECURITY3",
                    "title": "Enable authentication through user and password (conda channel 3)"
                  },
                  "condaIndexUrl3": {
                    "description": "Url of the Conda channel 3",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": true,
                    "level": 1,
                    "internalName": "NOT_USED_ROCKET_EXTRA_CONDA_INDEX_URL3",
                    "title": "Conda channel URL 3",
                    "default": "",
                    "examples": [
                      "https://nexus.bootstrap.golf.labs.stratio.com/rocket"
                    ]
                  },
                  "condaIndexVaultPath3": {
                    "description": "Vault secret containing the authentication credentials for the conda channel 3.",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": true,
                    "level": 1,
                    "internalName": "NOT_USED_ROCKET_EXTRA_CONDA_INDEX_URL_VAULT_PATH3",
                    "title": "Vault secret conda channel 3",
                    "ui": {
                      "visible": {
                        "condaIndexSecurity3": true
                      }
                    },
                    "default": "",
                    "examples": [
                      "conda"
                    ]
                  },
                  "condaIndexUrls": {
                    "description": "Environment variable (csv) with the url of the Conda channels",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 2,
                    "internalName": "ROCKET_CONDA_EXTRA_REPO_URLS",
                    "title": "Conda channels (urls)",
                    "default": "${condaIndexUrl1},${condaIndexUrl2},${condaIndexUrl3}"
                  },
                  "condaIndexVaultPaths": {
                    "description": "Environment variable (csv) with the vault paths containing the secrets of the Conda channels",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 2,
                    "internalName": "ROCKET_CONDA_EXTRA_REPO_VAULT_PATHS",
                    "title": "Conda Repositories (vault paths)",
                    "default": "${condaIndexVaultPath1},${condaIndexVaultPath2},${condaIndexVaultPath3}"
                  }
                },
                "required": []
              }
            }
          },
          "log": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "log",
            "title": "Logs",
            "description": "",
            "properties": {
              "spartaLogLevel": {
                "description": "Log level of the application.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_LOG_LEVEL",
                "title": "Rocket log level",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "WARN",
                  "ERROR",
                  "FATAL"
                ],
                "default": "INFO"
              },
              "spartaRedirectorLogLevel": {
                "description": "Log level of the Rocket redirector.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_REDIRECTOR_LOG_LEVEL",
                "title": "Rocket redirector log level",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "WARN",
                  "ERROR",
                  "FATAL"
                ],
                "default": "INFO"
              },
              "serviceLogLevel": {
                "description": "Log level of the service.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SERVICE_LOG_LEVEL",
                "title": "Service log level",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "WARN",
                  "ERROR",
                  "FATAL"
                ],
                "default": "ERROR"
              },
              "gosecLogLevel": {
                "description": "Log level of the gosec.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "GOSEC_LOG_LEVEL",
                "title": "GoSec log level",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "WARN",
                  "ERROR",
                  "FATAL"
                ],
                "default": "ERROR"
              },
              "gosecCrossdataLogLevel": {
                "description": "Log level of the crossdata gosec.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "GOSEC_CROSSDATA_LOG_LEVEL",
                "title": "GoSec Crossdata log level",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "WARN",
                  "ERROR",
                  "FATAL"
                ],
                "default": "ERROR"
              },
              "lineageLogLevel": {
                "description": "Log level of the gosec.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "LINEAGE_LOG_LEVEL",
                "title": "Lineage log level",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "WARN",
                  "ERROR",
                  "FATAL"
                ],
                "default": "ERROR"
              },
              "crossdataLogLevel": {
                "description": "Level of log of crossdata component.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "CROSSDATA_LOG_LEVEL",
                "title": "Catalog log level",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "WARN",
                  "ERROR",
                  "FATAL"
                ],
                "default": "WARN"
              },
              "connectorsLogLevel": {
                "description": "Log Level for Stratio Connectors logger.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "CONNECTORS_LOG_LEVEL",
                "title": "Connectors log level",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "WARN",
                  "ERROR",
                  "FATAL"
                ],
                "default": "ERROR"
              },
              "httpLogLevel": {
                "description": "Level of log of HTTP.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "HTTP_LOG_LEVEL",
                "title": "HTTP log level",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "WARN",
                  "ERROR",
                  "FATAL"
                ],
                "default": "ERROR"
              },
              "avroLogLevel": {
                "description": "Log level of avro component.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "AVRO_LOG_LEVEL",
                "title": "Avro log level",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "WARN",
                  "ERROR",
                  "FATAL"
                ],
                "default": "ERROR"
              },
              "hadoopLogLevel": {
                "description": "Log level of HDFS component.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "HADOOP_LOG_LEVEL",
                "title": "Hadoop log level",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "WARN",
                  "ERROR",
                  "FATAL"
                ],
                "default": "ERROR"
              },
              "parquetLogLevel": {
                "description": "Level of log of parquet.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "PARQUET_LOG_LEVEL",
                "title": "Parquet log level",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "WARN",
                  "ERROR",
                  "FATAL"
                ],
                "default": "ERROR"
              },
              "sparkLogLevel": {
                "description": "Log level of Spark properties.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_LOG_LEVEL",
                "title": "Spark log level",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "WARN",
                  "ERROR",
                  "FATAL"
                ],
                "default": "WARN"
              },
              "hikariLogLevel": {
                "description": "Log level of Hikari.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "HIKARI_LOG_LEVEL",
                "title": "Hikari log level",
                "enum": [
                  "DEBUG",
                  "INFO",
                  "WARN",
                  "ERROR",
                  "FATAL"
                ],
                "default": "ERROR"
              },
              "condaLogLevel": {
                "description": "Log level of conda.",
                "type": "string",
                "maxLength": 100,
                "minLength": 3,
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "CONDA_VERBOSITY",
                "title": "Conda log level",
                "enum": [
                  "0",
                  "1",
                  "2",
                  "3"
                ],
                "default": "0"
              }
            },
            "required": []
          },
          "classpathConfiguration": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "classpathConfig",
            "title": "Classpath configuration",
            "description": "Allow to customize the Rocket classpath, including new or predefined jars to classpath",
            "properties": {
              "crossdataNativeConnectorEnabled": {
                "description": "By default Crossdata native connector library is added to server, workers and workflows' driver and executor. Please uncheck it if you do not want to add it.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_CONNECTOR_CROSSDATA_NATIVE_CONNECTOR",
                "title": "Include Crossdata native connector library",
                "default": true
              },
              "crossdataNativeEngineEnabled": {
                "description": "By default Crossdata native engine library is added to server, workers and workflows' driver and executor. Please uncheck it if you do not want to add it.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_CONNECTOR_CROSSDATA_NATIVE_ENGINE",
                "title": "Include Crossdata native engine library",
                "default": true
              },
              "crossdataJdbcEnabled": {
                "description": "By default Crossdata JDBC is not added to server and workers.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_CONNECTOR_CROSSDATA_JDBC",
                "title": "Include Crossdata JDBC jar",
                "default": false
              },
              "kafkaConnectorEnabled": {
                "description": "By default Kafka connector is not added to server, workers and workflows' driver and executor.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_CONNECTOR_KAFKA",
                "title": "Include Kafka connector",
                "default": false
              },
              "xmlConnectorEnabled": {
                "description": "By default XML connector is not added to server, workers and workflows' driver and executor.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_CONNECTOR_XML",
                "title": "Include XML connector",
                "default": false
              },
              "xlsConnectorEnabled": {
                "description": "By default XLS connector is not added to server, workers and workflows' driver and executor.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_CONNECTOR_XLS",
                "title": "Include XLS connector",
                "default": false
              },
              "elasticConnectorEnabled": {
                "description": "By default ElasticSearch connector is not added to server, workers and workflows' driver and executor.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_CONNECTOR_ELASTIC",
                "title": "Include ElasticSearch connector",
                "default": false
              },
              "sftpConnectorEnabled": {
                "description": "By default SFTP connector is not added to server, workers and workflows' driver and executor.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_CONNECTOR_SFTP",
                "title": "Include SFTP connector",
                "default": false
              },
              "arangoConnectorEnabled": {
                "description": "By default ArangoDB connector is not added to server, workers and workflows' driver and executor.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_CONNECTOR_ARANGO",
                "title": "Include ArangoDB connector",
                "default": false
              },
              "mongoConnectorEnabled": {
                "description": "By default MongoDB connector is not added to server, workers and workflows' driver and executor.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_CONNECTOR_MONGODB",
                "title": "Include MongoDB connector",
                "default": false
              },
              "cassandraConnectorEnabled": {
                "description": "By default Cassandra connector is not added to server, workers and workflows' driver and executor.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_CONNECTOR_CASSANDRA",
                "title": "Include Cassandra connector",
                "default": false
              },
              "bigQueryConnectorEnabled": {
                "description": "By default BigQuery connector is not added to server, workers and workflows' driver and executor.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_CONNECTOR_BIGQUERY",
                "title": "Include BigQuery connector",
                "default": false
              },
              "eventHubConnectorEnabled": {
                "description": "By default EventHub connector is not added to server, workers and workflows' driver and executor.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_CONNECTOR_EVENTHUB",
                "title": "Include EventHub connector",
                "default": false
              },
              "ibmMqConnectorEnabled": {
                "description": "By default IBMMQ connector is not added to server, workers and workflows' driver and executor.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_CONNECTOR_IBMMQ",
                "title": "Include IBMMQ connector",
                "default": false
              },
              "salesforceConnectorEnabled": {
                "description": "By default SalesForce connector is not added to server, workers and workflows' driver and executor.",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENABLE_CONNECTOR_SALESFORCE",
                "title": "Include SalesForce connector",
                "default": false
              },
              "sparkCustomClassloaderEnabled": {
                "description": "Spark dynamic classloader to fully isolate extensions by project. Enabled by default",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARK_SECURITY_CUSTOM_CLASSLOADER_ENABLED",
                "title": "Enable dynamic classloader to fully isolate extensions by project",
                "default": true
              },
              "sparkCustomClassloaderTtl": {
                "description": "Spark custom classloader TTL. If a classloader from a project is not used after this TTL will be removed. When required, the project classloader is created again.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARK_SECURITY_TTL_CUSTOM_CLASSLOADER",
                "title": "Project classloader TTL",
                "default": "30d"
              },
              "sparkCustomClassloaderCheckTtl": {
                "description": "Defines how often to check if the classloader TTL is 0.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARK_SECURITY_TTL_CHECK_CUSTOM_CLASSLOADER",
                "title": "Period to check project classloader TTL",
                "default": "1h"
              },
              "addPluginsToClassloaderEnabled": {
                "description": "Add rocket plugins jar to Spark dynamic classloader to fully isolate Spark datasources by project . Enabled by default",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_CONFIG_INCLUDE_PLUGIN_JAR_INTO_EXTENSIONS_CLASSLOADER",
                "title": "Enable add rocket plugins to dynamic classloader to fully isolate Spark datasources by project",
                "default": true
              },
              "rocketExtraJars": {
                "description": "Comma-separated list of Rocket extra jars. This jars will be downloaded and added to server, workers and workflows' driver and executor",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ROCKET_EXTRA_JARS",
                "title": "Rocket extra jars",
                "examples": [
                  "https://repo1.maven.org/maven2/com/ibm/db2/jcc/11.1.4.4/jcc-11.1.4.4.jar,http://qa.int.mycompany.com/repository/com/stratio/crossdata/crossdata-spark2-udfs-examples_2.12/1.0.0/crossdata-spark2-udfs-examples_2.12-1.0.0.jar"
                ],
                "default": ""
              },
              "sparkClasspathExtraJars": {
                "description": "Comma-separated list of Spark extra jars that should be included into Spark Classpath. This jars will be downloaded and added into server and worker classpath, Spark driver classpath in folder /opt/spark/dist/jars and added in property spark.jars. Should be added here problematic jars like Big Query Jdbc connector, because this jars generate classpath or 'not suitable driver' errors in the normal case with Rocket extra jar property or Rocket extensions in project administration.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ROCKET_EXTRA_SPARK_JARS",
                "title": "Spark classpath extra jars",
                "examples": [
                  "https://repo1.maven.org/maven2/com/ibm/db2/jcc/11.1.4.4/jcc-11.1.4.4.jar,http://qa.int.mycompany.com/repository/com/stratio/crossdata/crossdata-spark2-udfs-examples_2.12/1.0.0/crossdata-spark2-udfs-examples_2.12-1.0.0.jar"
                ],
                "default": ""
              }
            },
            "required": [
              "crossdataNativeEngineEnabled",
              "crossdataNativeConnectorEnabled"
            ]
          },
          "migrationConfiguration": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "standard"
            },
            "name": "migrationConfiguration",
            "title": "Migration configuration",
            "description": "Allow to customize some steps that can be automatically performed when upgrading Rocket (e.g. update docker image parameters)",
            "properties": {
              "enableAutoUpdate": {
                "description": "If enabled, the migration process will modify the default docker images parameters for each project. Please, check out dockerImageUpdatePolicy to find out how to configure the upgrade",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "AUTO_UPGRADE_PARAMETERS_ENABLED",
                "title": "Enable auto upgrade project parameters",
                "default": true
              },
              "dockerImageUpdatePolicy": {
                "description": "These are the supported modes: default, force and autoupdate; Default: sync images if the image provided as environment variable matches with the one configured in the project parameter (excluding tag); Force: set the images provided as environment variables; AutoUpdate: update your images with the version provided for rocket-api via environment variable; You can find more information at Stratio docs",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "DOCKER_IMAGE_PARAMETERS_UPDATE_POLICY",
                "title": "Docker image parameters update policy",
                "enum": [
                  "Default",
                  "Force"
                ],
                "default": "Default"
              }
            },
            "required": [
              "enableAutoUpdate",
              "dockerImageUpdatePolicy"
            ]
          }
        },
        "required": []
      },
      "security": {
        "type": "object",
        "additionalProperties": false,
        "ui": {
          "component": "standard"
        },
        "name": "security",
        "title": "Security",
        "description": "",
        "properties": {
          "vaultEnable": {
            "description": "Security of Vault enabled.",
            "type": "boolean",
            "required": false,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "VAULT_ENABLE",
            "ui": {
              "updatable": false
            },
            "title": "Vault",
            "default": true
          },
          "vaultHosts": {
            "description": "Host list where vault is configured.",
            "type": "string",
            "maxLength": 100,
            "minLength": 3,
            "required": false,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "VAULT_HOSTS",
            "ui": {
              "updatable": false
            },
            "default": "${globals.vault.vaultHost}",
            "title": "Vault hosts"
          },
          "vaultPort": {
            "description": "Port to reach vault.",
            "type": "integer",
            "minimum": 1,
            "required": false,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "VAULT_PORT",
            "ui": {
              "updatable": false
            },
            "title": "Vault port",
            "default": "${globals.vault.vaultPort}"
          },
          "approlename": {
            "description": "Vault AppRole for Rocket Instance.",
            "type": "string",
            "required": true,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "VAULT_ROLE",
            "ui": {
              "updatable": false
            },
            "title": "Rocket Vault AppRole",
            "default": "${Application.domain}-${Application.name}"
          },
          "identityVaultPath": {
            "description": "vault path",
            "type": "string",
            "required": true,
            "readOnly": false,
            "level": 2,
            "ui": {
              "updatable": false
            },
            "application": false,
            "internalName": "IDENTITY_VAULT_PATH",
            "title": "Identity vault path",
            "default": "${Application.id}"
          },
          "useDynamicAuthentication": {
            "description": "Whether or not use dynamic authentication.",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "USE_DYNAMIC_AUTHENTICATION",
            "ui": {
              "updatable": false
            },
            "title": "Use dynamic authentication",
            "default": true
          },
          "useCABundleLegacyOnly": {
            "description": "Whether or not to enforce legacy CA bundle retrieval. When set to `false`it will fallback to legacy mode if the new CABundle file is not found.",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 2,
            "internalName": "CABUNDLE_LEGACY_PATH_ONLY",
            "ui": {
              "updatable": false
            },
            "title": "Only use legacy CA bundle retrieval",
            "default": true
          },
          "useVaultFullIsolatedStrategyInExecutions": {
            "description": "If enabled, all retrieved secrets will be relative to execution user vault paths.",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_SECURITY_USE_FULL_ISOLATED_SECRETS_STRATEGY",
            "ui": {
              "updatable": false
            },
            "title": "Vault full isolated strategy",
            "default": false
          },
          "fineGrainedProfilingEnabled": {
            "description": "Whether to use fine grained profiling or not. If enabled, each service will have a custom SA, Vault role and k8s role.",
            "type": "boolean",
            "required": true,
            "readOnly": false,
            "application": false,
            "level": 2,
            "internalName": "FINE_GRAINED_SA_ROLE_PROFILING_ENABLED",
            "ui": {
              "updatable": true
            },
            "title": "Enable fine grained profiling",
            "default": true
          },
          "assetExecutionsVaultRole": {
            "description": "The role used by asset executions when the fine grained profiling is enabled.",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 2,
            "internalName": "ASSET_EXECUTIONS_VAULT_ROLE",
            "ui": {
              "updatable": false
            },
            "title": "Asset executions default role",
            "default": "people${Application.id}"
          },
          "multiuserDoAsEnable": {
            "description": "Whether or not to add a UGI provider to execute local Spark jobs using project default identities.",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 2,
            "internalName": "SPARK_SECURITY_LOCAL_EXECUTOR_TASK_UGI_PROVIDER",
            "title": "Enable default project identity impersonation",
            "default": "org.apache.spark.security.RocketUgiProvider"
          },
          "dbCredentialsFromVault": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "dbCredentialsFromVault",
            "title": "Datastore credential retrieval from Vault",
            "description": "Tab to configure the path where the user and pass are stored",
            "properties": {
              "dbCredentialFromVaultEnabled": {
                "description": "Whether or not make visible the Credential retrieval configuration",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_SECURITY_DB_ENABLE",
                "title": "Credential retrieval configuration enabled",
                "default": false
              },
              "dbCredentialsVaultPath": {
                "description": "Vault path where long-lived credentials (user and pass) are located",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARK_SECURITY_DB_USER_VAULT_PATH",
                "title": "Credentials absolute vault path (access and secrey key)"
              }
            },
            "required": [
              "dbCredentialFromVaultEnabled"
            ]
          },
          "securityTlsEnable": {
            "description": "Use TLS security in Rocket",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SECURITY_TLS_ENABLE",
            "ui": {
              "updatable": false
            },
            "title": "Enable TLS security",
            "default": true
          },
          "sparkLegacyCyphersCbcEnable": {
            "description": "Use legacy Cyphers CBC using environment variable",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARK_SECURITY_ENABLE_LEGACY_CYPHERS_CBC",
            "ui": {
              "updatable": false
            },
            "title": "Enable legacy Cyphers CBC",
            "default": true
          },
          "sparkLegacyCyphersTLSEnable": {
            "description": "Use legacy Cyphers TLS 1.x using environment variable",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 2,
            "internalName": "SPARK_SECURITY_ENABLE_LEGACY_CYPHERS_TLS",
            "ui": {
              "updatable": false
            },
            "title": "Enable legacy Cyphers TLS 1.x",
            "default": false
          },
          "anonymizeExample": {
            "description": "Anonymize row examples MLModels which are created from MLFlowProject or Workflows ",
            "type": "boolean",
            "required": false,
            "readOnly": false,
            "application": false,
            "internalName": "SPARTA_CONFIG_ANONYMIZE_EXAMPLE",
            "ui": {
              "updatable": true
            },
            "level": 2,
            "title": " Anonymize Example enabled",
            "default": true
          },
          "kerberosConfiguration": {
            "type": "object",
            "ui": {
              "component": "accordion"
            },
            "additionalProperties": false,
            "name": "kerberosConfig",
            "title": "Kerberos configuration",
            "description": "Configure kerberos properties",
            "properties": {
              "securityKrbEnable": {
                "description": "Whether or not use kerberos security for all the components securized.",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SECURITY_KRB_ENABLE",
                "ui": {
                  "updatable": false
                },
                "title": "Enable KRB security",
                "default": true
              },
              "krb5ConfigMapName": {
                "description": "Sets the configmap with the krb5 config used to connect with hdfs. Usually is allocated in keos-kerberos-config",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ROCKET_HDFS_KRB5_CONFIG_MAP",
                "title": "HDFS Kerberos configmap",
                "default": "keos-kerberos-config"
              },
              "kerberosRealName": {
                "description": "Kerberos realm name",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "KERBEROS_REALM_NAME",
                "title": "Kerberos realm name",
                "default": "${globals.kerberos.realm}"
              }
            },
            "required": []
          },
          "calico": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "calico",
            "title": "Calico Network",
            "description": "Use Calico security to this Rocket instance",
            "properties": {
              "calicoEnabled": {
                "description": "Whether or not enable the Calico security.",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "CALICO_ENABLED",
                "title": "Use calico",
                "default": false
              },
              "calicoNetwork": {
                "description": "Name of the calico network where Rocket and the workflows are deployed if calico security is enabled. It uses the same value of Network name.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "default": "keos",
                "level": 1,
                "internalName": "CALICO_NETWORK",
                "ui": {
                  "visible": {
                    "calicoEnabled": true
                  }
                },
                "title": "Calico network"
              }
            },
            "required": []
          },
          "gosec": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "gosec",
            "title": "Gosec Plugin",
            "description": "",
            "properties": {
              "enableGosecAuth": {
                "description": "Whether or not enable GoSec authorization.",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_SECURITY_MANAGER_ENABLED",
                "title": "Enable Rocket security manager",
                "default": true
              },
              "crossdataSecurityManagerEnabled": {
                "description": "Whether or not enable Crossdata security manager. Activating this will force the check on Gosec policies when using Crossdata, taking the policies assigned to the logged user.",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "CROSSDATA_SECURITY_MANAGER_ENABLED",
                "title": "Enable Crossdata security manager",
                "default": true
              },
              "enableGosecFacade": {
                "description": "Whether or not enable GoSec authorization with facade implementation.",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_SECURITY_MANAGER_HTTP_ENABLED",
                "title": "Enable Gosec facade security manager",
                "default": true
              },
              "crossdataSecurityFineGrained": {
                "description": "Crossdata security fine-grained mode",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "CROSSDATA_SECURITY_FINE_GRAINED",
                "title": "Crossdata security fine-grained mode",
                "default": true
              },
              "crossdataSecurityAttributesAuthorization": {
                "description": "Enable/disable adding the collection information to authorization requests. It is mandatory for tag based authorization.",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "CROSSDATA_SECURITY_COLLECTION_BASED_AUTHORIZATION",
                "title": "Crossdata security tag authorization",
                "default": true
              },
              "crossdataSecurityDomainAuthorization": {
                "description": "Enable/disable authorization based in domain or collection. If disabled, Table authorization will be used",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "CROSSDATA_SECURITY_DOMAIN_AUTH_ENABLED",
                "title": "Crossdata security domain authorization",
                "default": true
              },
              "crossdataServerSemanticResourcesAuthorizationHiddenColumns": {
                "description": "Enables filter of tables and columns on which the BDL view is based applying gosec resource authorization",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "CROSSDATA_CORE_CATALOG_HASH_HIDDEN_COLUMNS",
                "title": "Enables filter of tables and columns on which the BDL view is based applying gosec resource authorization",
                "default": true
              },
              "gosecEncryptionEnable": {
                "description": "Allows you to work with encrypted Crossdata tables through the gosec-crypto plugin. Default is false, if enabled it is necessary to include in 'Rocket extra jar' field the jar with dependencies on gosec-crypto-utils, for example: http://qa.stratio.com/repository/releases/com/stratio/gosec/gosec-crypto-utils/0.2.0-32829cb/gosec-crypto-utils-0.2.0-32829cb-jar-with-dependencies.jar",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ENCRYPTION_ENABLE",
                "title": "Allows you to work with encrypted Crossdata tables through the gosec-crypto plugin.",
                "default": false
              },
              "gosecEncryptionTenant": {
                "description": "Tenant used in crypto functions used in built-in functions integrated with gosec",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "CRYPTO_TENANT",
                "title": "Tenant used in crypto functions used in built-in functions integrated with gosec",
                "default": "${tenantId}"
              },
              "gosecEncryptionServiceEndpoint": {
                "description": "Gosec encryption service endpoint",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "GOSEC_ENCRYPTION_DAAS_ENDPOINT",
                "title": "Gosec encryption service endpoint",
                "default": "https://gosec-encryption-daas.keos-core:8443"
              },
              "spartaSecurityManagerIdentitiesFilterCustomUsers": {
                "description": "Rocket security manager identities filter custom users",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_SECURITY_MANAGER_IDENTITIES_FILTER_CUSTOM_USERS",
                "title": "Rocket security manager identities filter custom users",
                "default": true
              },
              "spartaSecurityManagerIdentitiesFilterCustomGroups": {
                "description": "Rocket security manager identities filter custom groups",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_SECURITY_MANAGER_IDENTITIES_FILTER_CUSTOM_GROUPS",
                "title": "Rocket security manager identities filter custom groups",
                "default": false
              },
              "spartaSecurityManagerGosecIdentitiesUrl": {
                "description": "Rocket security manager identities URL",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_SECURITY_MANAGER_IDENTITIES_URL",
                "title": "Security manager identities url",
                "default": "https://gosec-identities-daas.keos-core:8443"
              },
              "spartaSecurityManagerServicesUrl": {
                "description": "Rocket Security manager services url",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_SECURITY_MANAGER_SERVICES_URL",
                "title": "Security manager services url",
                "default": "https://gosec-services-daas.keos-core:8443"
              },
              "spartaSecurityEndpointRegister": {
                "description": "Rocket Security endpoint register",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_PLUGIN_ENDPOINT_REGISTER",
                "title": "Rocket Security endpoint register",
                "default": "https://gosec-services-daas.keos-core:8443/services/"
              },
              "spartaSecurityEndpointAuthorizer": {
                "description": "Rocket Security endpoint authorizer",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_PLUGIN_ENDPOINT_AUTHORIZER",
                "title": "Security manager endpoint authorizer",
                "default": "https://gosec-authz.keos-core:8443/authorize/v3/{user}?service={service}&version={version}&instance={instance}&action={action}&resourceType={resourceType}&value={value}&hierarchy={hierarchy}"
              },
              "spartaSecurityEndpointPoliciesDomain": {
                "description": "Rocket Security endpoint policies domain",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_PLUGIN_ENDPOINT_POLICIESDOMAIN_INFO",
                "title": "Security manager endpoint policies domain",
                "default": "https://gosec-services-daas.keos-core:8443/policies/domains/facadeCache?uid={uid}&tid={tenant}"
              },
              "spartaSecurityServiceInfo": {
                "description": "Rocket Security service info",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_PLUGIN_SERVICE_INFO",
                "title": "Security manager service info",
                "default": "https://gosec-authz.keos-core:8443/service/instance/info?sid={sid}&version={v}"
              },
              "spartaSecurityUserInfo": {
                "description": "Rocket Security user info",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_PLUGIN_USER_INFO",
                "title": "Security manager user info",
                "default": "https://gosec-authz.keos-core:8443/user?uid={uid}"
              },
              "spartaSecurityPoliciesInfo": {
                "description": "Rocket Security policies info",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_PLUGIN_POLICIES_INFO",
                "title": "Security manager policies info",
                "default": "https://gosec-authz.keos-core:8443/policy?uid={uid}&service={service}"
              },
              "spartaSecurityDynamicFilter": {
                "description": "Rocket Security dynamic filter",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_PLUGIN_DYNAMIC_FILTER",
                "title": "Security manager dynamic filter",
                "default": "https://gosec-authz.keos-core:8443/authorize/dynamicFilter/runQuery?jdbcConnection={JDBC_CONNECTION}&query={QUERY}&tls={TLS}"
              },
              "spartaSecurityTagsInfo": {
                "description": "Rocket Security tags info",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_PLUGIN_TAGS_INFO",
                "title": "Security manager tags info",
                "default": "https://gosec-authz.keos-core:8443/tag?service={service}&version={v}&instance={sid}&resourceType={rt}&value={value}"
              },
              "spartaSecurityUserTagsInfo": {
                "description": "Rocket Security user tags info",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_PLUGIN_USERTAGS_INFO",
                "title": "Security manager user tags info",
                "default": "https://gosec-authz.keos-core:8443/user/tags?user={user}&tenant={tenant}"
              },
              "spartaSecurityManagerServicesImpersonatorPolicyEndpoint": {
                "description": "Services Impersonator Endpoint for security manager services",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_SECURITY_MANAGER_SERVICES_IMPERSONATOR_POLICY_ENDPOINT",
                "title": "Services Impersonator Endpoint",
                "default": "policies/impersonate"
              },
              "spartaSecurityManagerServicesImpersonatorCustomUsers": {
                "description": "Enable services impersonator for custom users in Rocket",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_SECURITY_MANAGER_SERVICES_IMPERSONATOR_CUSTOM_USERS",
                "title": "Enable services impersonator for custom users",
                "default": true
              },
              "spartaPluginCache": {
                "description": "Enable cache for dyplon",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_PLUGIN_CACHE_ENABLED",
                "title": "Dyplon cache",
                "default": true
              },
              "gosecPluginConfig": {
                "type": "object",
                "additionalProperties": false,
                "ui": {
                  "component": "switch"
                },
                "name": "gosecPluginConfig",
                "title": "GoSec Plugin configuration",
                "description": "GoSec Plugin configuration.",
                "properties": {
                  "initServerDyplonXD": {
                    "description": "Init server crossdata plugin on startup.",
                    "type": "boolean",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_SECURITY_MANAGER_DYPLON_XD_INIT",
                    "title": "Init server crossdata plugin",
                    "default": true
                  },
                  "crossdataPluginDefaultServerInstanceName": {
                    "description": "Crossdata plugin default server instance name. Configure it here or override inside the projects catalog settings if you want to share dyplon config with Crossdata Servers applications and Rocket projects.",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_SECURITY_MANAGER_DYPLON_XD_INSTANCE",
                    "title": "Crossdata plugin default instance name for all projects"
                  },
                  "crossdataPluginVersion": {
                    "description": "Crossdata plugin version. Configure it here or override inside the projects catalog settings if you want to share dyplon config with Crossdata Servers applications and Rocket projects.",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "CROSSDATA_DYPLON_VERSION",
                    "title": "Crossdata plugin default version for all projects"
                  },
                  "crossdataDyplonAuthorizer": {
                    "description": "Crossdata dyplon authorizer.",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "required": false,
                    "readOnly": true,
                    "application": false,
                    "level": 2,
                    "internalName": "CROSSDATA_DYPLON_AUTHORIZER",
                    "title": "Crossdata dyplon authorizer",
                    "default": "default"
                  },
                  "crossdataDyplonAuthorizerMode": {
                    "description": "GoSec Plugin authorization mode to use. Choose \"resource\" for basic authorization; \"tag\" for Stratio Governace tags authorization type (Stratio Governance is required);\"all\" for both (Stratio governance is required).",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "CROSSDATA_DYPLON_AUTHORIZER_MODE",
                    "title": "Crossdata dyplon authorizer mode",
                    "enum": [
                      "resource",
                      "tag",
                      "all"
                    ],
                    "default": "resource"
                  }
                },
                "required": []
              },
              "facadeConfiguration": {
                "type": "object",
                "additionalProperties": false,
                "ui": null,
                "name": "facadeConfiguration",
                "title": "Facade configuration",
                "description": "Facade configuration",
                "properties": {
                  "facadeAuthMode": {
                    "description": "Facade authorization mode",
                    "type": "string",
                    "required": true,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_FACADE_AUTH_MODE",
                    "ui": {
                      "updatable": true
                    },
                    "title": "Facade authorization mode",
                    "enum": [
                      "local",
                      "remote"
                    ],
                    "default": "local"
                  },
                  "facadeCacheEnabled": {
                    "description": "Facade cache enabled",
                    "type": "boolean",
                    "required": true,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_FACADE_CACHE_ENABLED",
                    "ui": {
                      "updatable": true
                    },
                    "title": "Facade cache enabled",
                    "default": true
                  },
                  "facadeCacheTtl": {
                    "description": "Facade cache TTL.",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_FACADE_CACHE_TTL",
                    "ui": {
                      "visible": {
                        "facadeCacheEnabled": true
                      },
                      "updatable": true
                    },
                    "title": "Facade cache TTL",
                    "default": "600 s"
                  },
                  "facadeCacheSize": {
                    "description": "Facade cache size.",
                    "type": "integer",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_FACADE_CACHE_SIZE",
                    "ui": {
                      "visible": {
                        "facadeCacheEnabled": true
                      },
                      "updatable": true
                    },
                    "title": "Facade cache size",
                    "default": 100000
                  }
                },
                "required": [
                  "facadeAuthMode",
                  "facadeCacheEnabled"
                ]
              },
              "dyplonConfiguration": {
                "type": "object",
                "additionalProperties": false,
                "name": "dyplonConfiguration",
                "title": "Dyplon configuration",
                "description": "Dyplon configuration",
                "properties": {
                  "dyplonCacheEnabled": {
                    "description": "Dyplon cache enabled",
                    "type": "boolean",
                    "required": true,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_DYPLON_CACHE_ENABLED",
                    "ui": {
                      "updatable": true
                    },
                    "title": "Dyplon cache enabled",
                    "default": true
                  },
                  "servicesDyplonCacheTtl": {
                    "description": "Services Dyplon cache TTL (hour / min / s)",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_DYPLON_CACHE_SERVICES_TTL",
                    "ui": {
                      "visible": {
                        "dyplonCacheEnabled": true
                      },
                      "updatable": true
                    },
                    "title": "Services Dyplon cache TTL (hour / min / s)",
                    "default": "5 min"
                  },
                  "servicesDyplonCacheSize": {
                    "description": "Services Dyplon cache Size",
                    "type": "integer",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_DYPLON_CACHE_SERVICES_SIZE",
                    "ui": {
                      "visible": {
                        "dyplonCacheEnabled": true
                      },
                      "updatable": true
                    },
                    "title": "Services Dyplon cache size",
                    "default": 1000
                  },
                  "usersDyplonCacheTtl": {
                    "description": "Users Dyplon cache TTL (hour / min / s)",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_DYPLON_CACHE_USERS_TTL",
                    "ui": {
                      "visible": {
                        "dyplonCacheEnabled": true
                      },
                      "updatable": true
                    },
                    "title": "Users Dyplon cache TTL (hour / min / s)",
                    "default": "60 min"
                  },
                  "usersDyplonCacheSize": {
                    "description": "Users Dyplon cache Size",
                    "type": "integer",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_DYPLON_CACHE_USERS_SIZE",
                    "ui": {
                      "visible": {
                        "dyplonCacheEnabled": true
                      },
                      "updatable": true
                    },
                    "title": "Users Dyplon cache size",
                    "default": 1000
                  },
                  "policiesDyplonCacheTtl": {
                    "description": "Policies Dyplon cache TTL (hour/min/s)",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_DYPLON_CACHE_POLICIES_TTL",
                    "ui": {
                      "visible": {
                        "dyplonCacheEnabled": true
                      },
                      "updatable": true
                    },
                    "title": "Policies Dyplon cache TTL (hour / min / s)",
                    "default": "10 min"
                  },
                  "policiesDyplonCacheSize": {
                    "description": "Policies Dyplon cache Size",
                    "type": "integer",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_DYPLON_CACHE_POLICIES_SIZE",
                    "ui": {
                      "visible": {
                        "dyplonCacheEnabled": true
                      },
                      "updatable": true
                    },
                    "title": "Policies Dyplon cache size",
                    "default": 1000
                  },
                  "tagsDyplonCacheTtl": {
                    "description": "Tags Dyplon cache TTL (hour/min/s)",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_DYPLON_CACHE_TAGS_TTL",
                    "ui": {
                      "visible": {
                        "dyplonCacheEnabled": true
                      },
                      "updatable": true
                    },
                    "title": "Tags Dyplon cache TTL (hour / min / s)",
                    "default": "10 min"
                  },
                  "tagsDyplonCacheSize": {
                    "description": "Tags Dyplon cache Size",
                    "type": "integer",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_DYPLON_CACHE_TAGS_SIZE",
                    "ui": {
                      "visible": {
                        "dyplonCacheEnabled": true
                      },
                      "updatable": true
                    },
                    "title": "Tags Dyplon cache size",
                    "default": 1000
                  },
                  "userTagsDyplonCacheTtl": {
                    "description": "User tags Dyplon cache TTL (hour/min/s)",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_DYPLON_CACHE_USERTAGS_TTL",
                    "ui": {
                      "visible": {
                        "dyplonCacheEnabled": true
                      },
                      "updatable": true
                    },
                    "title": "User tags Dyplon cache TTL (hour / min / s)",
                    "default": "10 min"
                  },
                  "userTagsDyplonCacheSize": {
                    "description": "User tags Dyplon cache Size",
                    "type": "integer",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_DYPLON_CACHE_USERTAGS_SIZE",
                    "ui": {
                      "visible": {
                        "dyplonCacheEnabled": true
                      },
                      "updatable": true
                    },
                    "title": "User tags Dyplon cache size",
                    "default": 1000
                  },
                  "domainsDyplonCacheTtl": {
                    "description": "Domains Dyplon cache TTL (hour/min/s)",
                    "type": "string",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_POLICIESDOMAIN_CACHE_TTL",
                    "ui": {
                      "visible": {
                        "dyplonCacheEnabled": true
                      },
                      "updatable": true
                    },
                    "title": "Tags Dyplon Policies Domain Cache TTL (hour / min / s)",
                    "default": "10 min"
                  },
                  "domainsDyplonCacheSize": {
                    "description": "Domains Dyplon cache Size",
                    "type": "integer",
                    "required": false,
                    "readOnly": false,
                    "application": false,
                    "level": 1,
                    "internalName": "SPARTA_PLUGIN_POLICIESDOMAIN_CACHE_SIZE",
                    "ui": {
                      "visible": {
                        "dyplonCacheEnabled": true
                      },
                      "updatable": true
                    },
                    "title": "Domains Dyplon cache size",
                    "default": 1000
                  }
                },
                "required": [
                  "dyplonCacheEnabled"
                ]
              }
            },
            "required": []
          },
          "sparkUi": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "sparkUi",
            "title": "SparkUi Security",
            "description": "",
            "properties": {
              "enableSparkUiSecurity": {
                "description": "Whether to activate the Spark UI authorization via JWT token.",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_API_JWTCOOKIE_ENABLE",
                "title": "Enable Spark UI authorization",
                "default": true
              },
              "sparkUiJwtSecretVaultPath": {
                "description": "Vault path where to obtain the key to sign/verify the Spark UI authoriztion JWT.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_API_JWTCOOKIE_SECRET_VAULT_PATH",
                "title": "JWT secret vault path",
                "default": "v1/userland/passwords/${Application.id}/jwtsecret"
              },
              "sparkUiJwtCookieName": {
                "description": "Name of the JWT cookie with user projects info to authorize access to the Spark UI.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_API_JWTCOOKIE_NAME",
                "title": "Spark UI cookie name",
                "default": "SPARK_AUTH"
              },
              "sparkUiJwtUserClaim": {
                "description": "Name of the claim in the Spark UI JWT containing the user name.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_API_JWTCOOKIE_USER_CLAIM",
                "title": "Spark UI cookie user claim",
                "default": "user"
              },
              "sparkUiJwtGroupsClaim": {
                "description": "Name of the claim in the Spark UI JWT containing the user projects.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_API_JWTCOOKIE_PROJECTS_CLAIM",
                "title": "Spark UI cookie projects claim",
                "default": "projects"
              },
              "sparkUiJwtCookieDuration": {
                "description": "Duration of the JWT user to authorize access to the Spark UI.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 2,
                "internalName": "SPARTA_API_SPARKJWTCOOKIE_DURATION",
                "title": "Spark UI JWT duration",
                "default": "8h"
              }
            },
            "required": []
          },
          "customizedBlacklists": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "Blacklists",
            "title": "Blacklists",
            "description": "Add custom blacklists (IPs, Addresses)",
            "properties": {
              "addressesBlacklist": {
                "description": "Add a blacklist of comma-separated addresses",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ROCKET_SECURITY_CHECK_BLACKLISTED_ADDRESSES",
                "examples": [
                  "google.com,msn.com"
                ],
                "title": "Blacklisted Addresses",
                "default": ""
              },
              "ipsBlacklist": {
                "description": "Add a blacklist of comma-separated IPs",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ROCKET_SECURITY_CHECK_BLACKLISTED_IPS",
                "examples": [
                  "127.0.0.1,127.0.0.2"
                ],
                "title": "Blacklisted IPs",
                "default": ""
              },
              "endpointsBlacklist": {
                "description": "Add a blacklist of comma-separated endpoints",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ROCKET_SECURITY_CHECK_BLACKLISTED_ENDPOINTS",
                "examples": [
                  "/marathon,/mesos"
                ],
                "title": "Blacklisted endpoints",
                "default": ""
              },
              "portsBlacklist": {
                "description": "Add a blacklist of comma-separated ports",
                "type": "string",
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "ROCKET_SECURITY_CHECK_BLACKLISTED_PORTS",
                "examples": [
                  "5050,22222"
                ],
                "title": "Blacklisted ports",
                "default": ""
              }
            },
            "required": []
          },
          "cors": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "component": "accordion"
            },
            "name": "cors",
            "title": "Cors",
            "description": "Cross-origin resource sharing",
            "properties": {
              "allowCredentials": {
                "description": "Allow credentials header.",
                "type": "boolean",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_API_CORS_ALLOW_CREDENTIALS",
                "title": "Allow credentials",
                "default": true
              },
              "allowOrigin": {
                "description": "Allow origin header.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_API_CORS_ALLOW_ORIGIN",
                "title": "Allow origin",
                "default": "*"
              },
              "allowExtraHeaders": {
                "description": "Allow allow extra header.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_API_CORS_ALLOW_EXTRA_HEADERS",
                "title": "Allow extra headers",
                "default": ""
              },
              "strictTransportMaxAge": {
                "description": "Strict transport max age property.",
                "type": "integer",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_API_CORS_STRICT_TRANSPORT_MAX_AGE",
                "title": "Strict transport max age",
                "default": 31536000
              },
              "xssProtection": {
                "description": "X-XSS Protection header.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_API_CORS_XSS_PROTECTION",
                "title": "X-XSS Protection",
                "default": "1; mode=block"
              },
              "xFrameOptions": {
                "description": "X-Frame options header.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_API_CORS_XFRAME_OPTIONS",
                "title": "X-Frame options",
                "default": "SAMEORIGIN"
              },
              "xContentTypeOptions": {
                "description": "X-Content type options header.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_API_CORS_X_CONTENT_TYPE_OPTIONS",
                "title": "X-Content type options",
                "default": "nosniff"
              },
              "contentSecurityPolicy": {
                "description": "X-Content security policy header.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_API_CORS_CONTENT_SECURITY_POLICY",
                "default": "default-src 'self' 'unsafe-inline' ${admin_fqdn} wss://${admin_fqdn}; img-src 'self' 'unsafe-inline' data:;",
                "title": "X-Content security policy"
              },
              "expectCT": {
                "description": "Expect-CT header.",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_API_CORS_EXPECT_CT",
                "title": "Expect-CT"
              }
            }
          }
        },
        "required": [
          "approlename"
        ]
      },
      "environment": {
        "type": "object",
        "additionalProperties": false,
        "ui": {
          "component": "standard"
        },
        "name": "environment",
        "title": "Environment",
        "description": "",
        "properties": {
          "bootstrapMode": {
            "description": "Cluster bootstrap mode",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_BOOTSTRAP_MODE",
            "ui": {
              "updatable": false
            },
            "title": "Cluster bootstrap mode",
            "enum": [
              "local",
              "remote"
            ],
            "default": "remote"
          },
          "authMode": {
            "description": "Authorization mode",
            "type": "string",
            "maxLength": 256,
            "minLength": 3,
            "required": true,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_API_AUTH_MODE",
            "ui": {
              "updatable": true
            },
            "title": "Authorization mode",
            "enum": [
              "HeaderMutual",
              "Oauth2Mutual",
              "JwtMutual"
            ],
            "default": "Oauth2Mutual"
          },
          "allowedCnCertificates": {
            "description": "Comma separated list of certificate CNs that will be allowed.",
            "type": "string",
            "required": false,
            "readOnly": false,
            "application": false,
            "level": 1,
            "internalName": "SPARTA_API_ALLOWED_CN_CERTIFICATES",
            "ui": {
              "updatable": false
            },
            "title": "Allowed Certificate CNs",
            "default": "*"
          },
          "headersMutual": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "visible": {
                "authMode": "HeaderMutual"
              }
            },
            "name": "headersMutual",
            "title": "Headers and Mutual TLS",
            "description": "",
            "properties": {
              "headersAuthenticationEnabled": {
                "description": "Whether or not enable authentication via headers",
                "type": "boolean",
                "required": true,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_AUTHVIAHEADERS_ENABLED",
                "ui": {
                  "updatable": false
                },
                "title": "Authentication via headers (Not compatible with authentication via 'SSO' or 'JWT' option)",
                "default": false
              },
              "userHeaderKey": {
                "description": "User header key name",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_AUTHVIAHEADERS_HEADER_USER",
                "ui": {
                  "updatable": false
                },
                "title": "User header key",
                "default": "USER_HEADER"
              },
              "groupHeaderKey": {
                "description": "User header key name",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "SPARTA_AUTHVIAHEADERS_HEADER_GROUP",
                "ui": {
                  "updatable": false
                },
                "title": "Group header key",
                "default": "GROUP_HEADER"
              }
            },
            "required": []
          },
          "securityOauth2Enable": {
            "description": "Whether or not enable OAuth authentication",
            "type": "boolean",
            "required": true,
            "readOnly": false,
            "application": false,
            "level": 2,
            "internalName": "SECURITY_OAUTH2_ENABLE",
            "ui": {
              "updatable": false
            },
            "title": "Single Sign-On (Not compatible with authentication via 'Headers' option)",
            "default": true
          },
          "oauth2CookieName": {
            "description": "Name of the cookie provided by SSO.",
            "type": "string",
            "maxLength": 100,
            "minLength": 3,
            "required": false,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "OAUTH2_COOKIE_NAME",
            "title": "OAuth2 cookie name",
            "default": "user"
          },
          "oauth2UrlCallback": {
            "description": "The URL where the user will be returned when authenticated.",
            "type": "string",
            "required": false,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "OAUTH2_URL_CALLBACK",
            "ui": {
              "updatable": false
            },
            "title": "OAuth2 callback URL",
            "default": "https://${rocketServerHost}/${rocketVPath}/login"
          },
          "oauth2UrlOnLoginGoTo": {
            "description": "URL where the user has to be authenticated (the login page).",
            "type": "string",
            "maxLength": 100,
            "minLength": 3,
            "required": false,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "OAUTH2_URL_ON_LOGIN_GO_TO",
            "ui": {
              "updatable": false
            },
            "title": "OAuth2 after login URL",
            "default": "/${rocketVPath}/#"
          },
          "oauth2SslAuthorize": {
            "description": "URL where the application is redirected after the 1st step of SSO OAUTH2 protocol.",
            "type": "string",
            "maxLength": 256,
            "minLength": 3,
            "required": false,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "OAUTH2_SSL_AUTHORIZE",
            "ui": {
              "updatable": false
            },
            "title": "OAuth2 SSL authorize URL",
            "default": "${globals.sso.urlAuthorize}"
          },
          "oauth2UrlAccessToken": {
            "description": "Endpoint of the server that will send the token of OAUTH2.",
            "type": "string",
            "maxLength": 256,
            "minLength": 3,
            "required": false,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "OAUTH2_URL_ACCESS_TOKEN",
            "ui": {
              "updatable": false
            },
            "title": "OAuth2 access token URL",
            "default": "${globals.sso.accessToken}"
          },
          "oauth2UrlProfile": {
            "description": "Authorized server endpoint that will show the profile.",
            "type": "string",
            "maxLength": 256,
            "minLength": 3,
            "required": false,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "OAUTH2_URL_PROFILE",
            "ui": {
              "updatable": false
            },
            "title": "OAuth2 profile URL",
            "default": "${globals.sso.profile}"
          },
          "oauth2UrlLogout": {
            "description": "URL destination when the user logs out of the app.",
            "type": "string",
            "maxLength": 100,
            "minLength": 3,
            "required": false,
            "readOnly": true,
            "application": false,
            "level": 2,
            "internalName": "OAUTH2_URL_LOGOUT",
            "ui": {
              "updatable": false
            },
            "title": "OAuth2 logout URL",
            "default": "${globals.sso.logout}"
          },
          "jwtMutual": {
            "type": "object",
            "additionalProperties": false,
            "ui": {
              "visible": {
                "authMode": "JwtMutual"
              }
            },
            "name": "jwtMutual",
            "title": "JWT and Mutual TLS",
            "description": "",
            "properties": {
              "publicKeyUrl": {
                "description": "Url where public key is exposed",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "JWT_PUBLIC_KEY_URL",
                "ui": {
                  "updatable": false
                },
                "title": "Url where public key will be retrieved",
                "examples": [
                  "http://jwtserver.stratio.com:5000/auth"
                ]
              },
              "jwtPrefix": {
                "description": "JWT header prefix key",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "JWT_HEADER_PREFIX",
                "ui": {
                  "updatable": false
                },
                "title": "JWT header prefix key",
                "default": "Bearer "
              },
              "jwtHeader": {
                "description": "JWT header key name",
                "type": "string",
                "required": false,
                "readOnly": false,
                "application": false,
                "level": 1,
                "internalName": "JWT_HEADER_NAME",
                "ui": {
                  "updatable": false
                },
                "title": "Jwt header key",
                "default": "Authorization"
              }
            },
            "required": []
          }
        },
        "required": [
          "authMode"
        ]
      }
    }
  },
  "lifecycles": {
    "install": {
      "start": [
        {
          "type": "core/disable",
          "tag": "gosec-register",
          "enabled": "false"
        },
        {
          "label": "Print install start log",
          "type": "io/print",
          "text": "Lifecycle: Install/start"
        },
        {
          "label": "Init secrets creation log",
          "type": "io/print",
          "text": "------------- Instance secrets creation --------------"
        },
        {
          "label": "=> install_start_secretsCreation_instanceCertificate: Creating instance certificate",
          "type": "secret/certificate",
          "path": "/userland/certificates/${Application.id}",
          "secretName": "${Application.id}",
          "commonName": "${Application.id}",
          "altNames": "${rocketServerHost}, ${serviceId}.${k8sNamespace}, *.${k8sNamespace}"
        },
        {
          "label": "=> install_start_secretsCreation_cookieSecret: Creating cookie secret",
          "type": "secret/password",
          "path": "/userland/passwords/${Application.id}",
          "secretName": "keystore",
          "password": "${randomString(10)}"
        },
        {
          "label": "=> install_start_secretsCreation_ssoOauthPass: Password Oauth",
          "type": "secret/password",
          "path": "/userland/passwords/${Application.id}",
          "secretName": "oauthinfo",
          "user": "${Application.id}-oauth-id",
          "password": "${randomString(10)}"
        },
        {
          "label": "=> install_start_secretsCreation_jwtSecret: Spark UI JWT Secret",
          "type": "secret/password",
          "path": "/userland/passwords/${Application.id}",
          "secretName": "jwtsecret",
          "password": "${randomString(10)}"
        },
        {
          "type": "secret/keytab",
          "label": "Creating keytab",
          "path": "/userland/kerberos/${Application.id}",
          "secretName": "${Application.id}",
          "principal": "${Application.id}",
          "realm": "${globals.kerberos.realm}"
        },
        {
          "type": "switch",
          "expression": "${uploadCicdCredentials}",
          "cases": [
            {
              "key": true,
              "tasks": [
                {
                  "label": "=> install_start_secretsCreation_jenkisCredentials: Credentials for assets CI/CD ",
                  "type": "secret/password",
                  "path": "/userland/passwords/${Application.id}",
                  "secretName": "jenkins",
                  "user": "${userCicdCredentials}",
                  "password": "${passwordCicdCredentials}"
                }
              ]
            }
          ],
          "default": {
            "tasks": []
          }
        },
        {
          "label": "Init secrets creation log",
          "type": "io/print",
          "text": "------------- Execution identity secrets creation --------------"
        },
        {
          "label": "=> install_start_secretsCreation_instanceCertificate: Creating instance certificate",
          "type": "secret/certificate",
          "path": "/userland/certificates/${executionIdentityVaultPrefix}${Application.id}",
          "secretName": "${executionIdentity}",
          "commonName": "${executionIdentity}",
          "altNames": "*.${k8sNamespace}"
        },
        {
          "label": "=> install_start_secretsCreation_cookieSecret: Creating cookie secret",
          "type": "secret/password",
          "path": "/userland/passwords/${executionIdentityVaultPrefix}${Application.id}",
          "secretName": "keystore",
          "password": "${randomString(10)}"
        },
        {
          "type": "secret/keytab",
          "label": "Creating keytab",
          "path": "/userland/kerberos/${executionIdentityVaultPrefix}${Application.id}",
          "secretName": "${executionIdentity}",
          "principal": "${executionIdentity}",
          "realm": "${globals.kerberos.realm}"
        },
        {
          "label": "Init secrets creation log",
          "type": "io/print",
          "text": "------------- Gosec users creation --------------"
        },
        {
          "label": "=> Gosec: Creating users ${Application.id} in tenant ${tenantId} and ${executionIdentity} in tenant ${tenantId}",
          "type": "gosec/users/create",
          "users": [
            "GosecUser(id ${Application.id}, tenant ${tenantId}, name ${Application.id}, email ${Application.id}@stratio.com)",
            "GosecUser(id ${executionIdentity}, tenant ${tenantId}, name ${executionIdentity}, email ${executionIdentity}@stratio.com)"
          ]
        },
        {
          "label": "Labels creation",
          "type": "io/print",
          "text": "------------- Insert labels --------------"
        },
        {
          "type": "labels/upsert",
          "scope": "service,deployment",
          "labels": "[{\"key\":\"rocket.stratio.com/akka-cluster\", \"value\":\"${Application.name}\"}]"
        },
        {
          "label": "Metadata database creation",
          "type": "io/print",
          "text": "------------- Database creation --------------"
        },
        {
          "label": "=> Creating Metadata database: ${postgresDatabase}, hostname: ${postgresDbCreationClusterName}, Namespace: ${postgresNamespace}",
          "type": "postgres/database/create",
          "databaseName": "${postgresDatabase}",
          "databaseNamespace": "${postgresNamespace}",
          "hostName": "${postgresDbCreationClusterName}",
          "hostNamespace": "${postgresNamespace}",
          "continueOnFail": "true"
        },
        {
          "label": "Catalog database creation",
          "type": "io/print",
          "text": "------------- Catalog database creation --------------"
        },
        {
          "label": "=> Creating Catalog database: ${crossdataCatalogHiveDatabase}, hostname: ${postgresDbCreationClusterName}, Namespace: ${postgresNamespace}",
          "type": "postgres/database/create",
          "databaseName": "${crossdataCatalogHiveDatabase}",
          "databaseNamespace": "${postgresNamespace}",
          "hostName": "${postgresDbCreationClusterName}",
          "hostNamespace": "${postgresNamespace}",
          "continueOnFail": "true"
        },
        {
          "label": "Metadata service policy creation",
          "type": "io/print",
          "text": "------------- Metadata service policy creation --------------"
        },
        {
          "label": "=> Creating Metadata service policy: ${rocketServiceName}-metadata-policy, sid: ${postgresServiceId}, database: ${postgresDatabase}, users: ${Application.id},${executionIdentity}",
          "type": "gosec/policies/create",
          "name": "${rocketServiceName}-metadata-policy",
          "enabled": "true",
          "groups": [],
          "users": [
            "${Application.id}"
          ],
          "tid": "${tenantId}",
          "services": [
            {
              "serviceType": "postgres",
              "instances": [
                {
                  "sid": "${postgresServiceId}",
                  "acls": [
                    "ACL(resourceType Database, name ${postgresDatabase}, actionsAllow [Create, Connect], actionsDeny [Temporary], recursive false)",
                    "ACL(resourceType Database, name postgres, actionsAllow [Create, Connect], actionsDeny [Temporary], recursive false)",
                    "ACL(resourceType Tablespace, name ${postgresDatabase}, actionsAllow [Create], actionsDeny [], recursive false)",
                    "ACL(resourceType Schema, name ${postgresDatabase}.*, actionsAllow [Create, Usage], actionsDeny [], recursive false)",
                    "ACL(resourceType Foreign Data Wrapper, name ${postgresDatabase}.*, actionsAllow [Usage], actionsDeny [], recursive false)",
                    "ACL(resourceType Large object, name ${postgresDatabase}.*, actionsAllow [Select, Update], actionsDeny [], recursive false)",
                    "ACL(resourceType Foreign Server, name ${postgresDatabase}.*, actionsAllow [Usage], actionsDeny [], recursive false)",
                    "ACL(resourceType Language, name ${postgresDatabase}.*, actionsAllow [Usage], actionsDeny [], recursive false)",
                    "ACL(resourceType Domain, name ${postgresDatabase}.*, actionsAllow [Usage], actionsDeny [], recursive false)",
                    "ACL(resourceType Sequence, name ${postgresDatabase}.*, actionsAllow [Select, Update, Usage], actionsDeny [], recursive false)",
                    "ACL(resourceType Function, name ${postgresDatabase}.*, actionsAllow [Execute], actionsDeny [], recursive false)",
                    "ACL(resourceType Type, name ${postgresDatabase}.*, actionsAllow [Usage], actionsDeny [], recursive false)",
                    "ACL(resourceType View, name ${postgresDatabase}.*, actionsAllow [Select, Insert, Update, Delete, Truncate, References, Trigger], actionsDeny [], recursive false)",
                    "ACL(resourceType Table, name ${postgresDatabase}.*, actionsAllow [Select, Insert, Update, Delete, Truncate, References, Trigger], actionsDeny [], recursive false)"
                  ]
                }
              ]
            }
          ]
        },
        {
          "label": "Execution identity policy creation",
          "type": "io/print",
          "text": "------------- Execution identity policy creation --------------"
        },
        {
          "label": "=> Creating Execution identity policy: ${rocketServiceName}-identities-policy, sid: ${postgresServiceId}, database: ${postgresDatabase}, users: ${Application.id},${executionIdentity}",
          "type": "gosec/policies/create",
          "name": "${rocketServiceName}-identities-policy",
          "enabled": "true",
          "groups": [],
          "users": [
            "${executionIdentity}"
          ],
          "tid": "${tenantId}",
          "services": [
            {
              "serviceType": "postgres",
              "instances": [
                {
                  "sid": "${postgresServiceId}",
                  "acls": [
                    "ACL(resourceType Database, name postgres, recursive false, actionsAllow [Connect], actionsDeny [])",
                    "ACL(resourceType Database, name ${postgresDatabase}, recursive false, actionsAllow [Connect], actionsDeny [])",
                    "ACL(resourceType Tablespace, name ${postgresDatabase}, recursive false, actionsAllow [], actionsDeny [])",
                    "ACL(resourceType Schema, name ${postgresDatabase}.*, recursive false, actionsAllow [Usage], actionsDeny [])",
                    "ACL(resourceType Foreign Data Wrapper, name ${postgresDatabase}.*, recursive false, actionsAllow [Usage], actionsDeny [])",
                    "ACL(resourceType Large object, name ${postgresDatabase}.*, recursive false, actionsAllow [Select], actionsDeny [])",
                    "ACL(resourceType Foreign Server, name ${postgresDatabase}.*, recursive false, actionsAllow [Usage], actionsDeny [])",
                    "ACL(resourceType Language, name ${postgresDatabase}.*, recursive false, actionsAllow [Usage], actionsDeny [])",
                    "ACL(resourceType Domain, name ${postgresDatabase}.*, recursive false, actionsAllow [Usage], actionsDeny [])",
                    "ACL(resourceType Sequence, name ${postgresDatabase}.*, recursive false, actionsAllow [Usage,  Select,  Update], actionsDeny [])",
                    "ACL(resourceType Function, name ${postgresDatabase}.*, recursive false, actionsAllow [Execute], actionsDeny [])",
                    "ACL(resourceType Type, name ${postgresDatabase}.*, recursive false, actionsAllow [Usage], actionsDeny [])",
                    "ACL(resourceType View, name ${postgresDatabase}.*, recursive false, actionsAllow [Select], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.*, recursive false, actionsAllow [Select], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.asset_execution, recursive false, actionsAllow [Select,  Insert,  Update], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.asset_relation, recursive false, actionsAllow [Select,  Insert], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.mlmodel_master, recursive false, actionsAllow [Select,  Insert], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.asset_version, recursive false, actionsAllow [Delete,  Select,  Insert,  Update], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.mltrainer_version, recursive false, actionsAllow [Delete,  Select,  Insert,  Update], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.mltrainer_master, recursive false, actionsAllow [Select,  Insert], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.mlmodel_serialization, recursive false, actionsAllow [Delete,  Select,  Insert,  Update], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.mlmodel_evaluation, recursive false, actionsAllow [Select,  Insert], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.asset_version_execution_relation, recursive false, actionsAllow [Delete,  Select,  Insert, Update], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.workflow_session, recursive false, actionsAllow [Select,  Update], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.workflow_session_step_write_result, recursive false, actionsAllow [Select,  Insert], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.automl_pipeline_session, recursive false, actionsAllow [Select,  Insert,  Update], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.mlflow_project_session, recursive false, actionsAllow [Select,  Insert,  Update], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.mleval_execution_relation, recursive false, actionsAllow [Select,  Insert], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.asset, recursive false, actionsAllow [Select,  Insert,  Update], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.activity, recursive false, actionsAllow [Select,  Insert,  Update], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.mlmodel_metrics, recursive false, actionsAllow [Delete,  Select,  Insert,  Update], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.mlmodel_version, recursive false, actionsAllow [Delete,  Select,  Insert,  Update], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.ml_data_summary, recursive false, actionsAllow [Delete,  Select,  Insert,  Update], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.quality_rule_result, recursive false, actionsAllow [Select,  Insert,  Update], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.workflow_session_step_result, recursive false, actionsAllow [Select,  Insert,  Update], actionsDeny [])",
                    "ACL(resourceType Table, name ${postgresDatabase}.${postgresSchema}.execution_report_logs, recursive false, actionsAllow [Select,  Insert], actionsDeny [])"
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "gosec/policies/create",
          "name": "${rocketServiceName}-hdfs-policy",
          "groups": [],
          "users": [
            "${Application.id}",
            "${executionIdentity}"
          ],
          "tid": "${tenantId}",
          "services": [
            {
              "serviceType": "hdfs",
              "instances": [
                {
                  "sid": "${hdfsConnectionDB.host.default}.${hdfsConnectionDB.namespace}",
                  "acls": [
                    "ACL(resourceType file, name ${hdfsRocketBasePath}/, actionsAllow [Read, Write, Delete, Execute], actionsDeny [], recursive true)"
                  ]
                }
              ]
            }
          ],
          "enabled": "${executePrerequisitesHdfsPolicy}"
        },
        {
          "label": "Catalog policy creation",
          "type": "io/print",
          "text": "------------- Catalog policy creation --------------"
        },
        {
          "label": "=> Creating Catalog policy: ${rocketServiceName}-catalog-policy, sid: ${postgresServiceId}, database: ${crossdataCatalogHiveDatabase}, users: ${Application.id},${executionIdentity}",
          "type": "gosec/policies/create",
          "name": "${rocketServiceName}-catalog-policy",
          "enabled": "${crossdataCatalogHiveDatabaseAuthorizationPolicy}",
          "groups": [],
          "users": [
            "${Application.id}",
            "${executionIdentity}"
          ],
          "tid": "${tenantId}",
          "services": [
            {
              "serviceType": "postgres",
              "instances": [
                {
                  "sid": "${postgresServiceId}",
                  "acls": [
                    "ACL(resourceType Database, name ${crossdataCatalogHiveDatabase}, actionsAllow [Create, Connect], actionsDeny [Temporary], recursive false)",
                    "ACL(resourceType Database, name postgres, actionsAllow [Create, Connect], actionsDeny [Temporary], recursive false)",
                    "ACL(resourceType Tablespace, name ${crossdataCatalogHiveDatabase}, actionsAllow [Create], actionsDeny [], recursive false)",
                    "ACL(resourceType Schema, name ${crossdataCatalogHiveDatabase}.*, actionsAllow [Create, Usage], actionsDeny [], recursive false)",
                    "ACL(resourceType Foreign Data Wrapper, name ${crossdataCatalogHiveDatabase}.*, actionsAllow [Usage], actionsDeny [], recursive false)",
                    "ACL(resourceType Large object, name ${crossdataCatalogHiveDatabase}.*, actionsAllow [Select, Update], actionsDeny [], recursive false)",
                    "ACL(resourceType Foreign Server, name ${crossdataCatalogHiveDatabase}.*, actionsAllow [Usage], actionsDeny [], recursive false)",
                    "ACL(resourceType Language, name ${crossdataCatalogHiveDatabase}.*, actionsAllow [Usage], actionsDeny [], recursive false)",
                    "ACL(resourceType Domain, name ${crossdataCatalogHiveDatabase}.*, actionsAllow [Usage], actionsDeny [], recursive false)",
                    "ACL(resourceType Sequence, name ${crossdataCatalogHiveDatabase}.*, actionsAllow [Select, Update, Usage], actionsDeny [], recursive false)",
                    "ACL(resourceType Function, name ${crossdataCatalogHiveDatabase}.*, actionsAllow [Execute], actionsDeny [], recursive false)",
                    "ACL(resourceType Type, name ${crossdataCatalogHiveDatabase}.*, actionsAllow [Usage], actionsDeny [], recursive false)",
                    "ACL(resourceType View, name ${crossdataCatalogHiveDatabase}.*, actionsAllow [Select, Insert, Update, Delete, Truncate, References, Trigger], actionsDeny [], recursive false)",
                    "ACL(resourceType Table, name ${crossdataCatalogHiveDatabase}.*, actionsAllow [Select, Insert, Update, Delete, Truncate, References, Trigger], actionsDeny [], recursive false)"
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "kubernetes/customresource/create",
          "apiVersion": "secrets.stratio.com/v2beta1",
          "kind": "SecretsIdentity",
          "plural": "SecretsIdentities",
          "name": "${Application.name}",
          "namespace": "${Application.domain}",
          "spec": "{\"enableDataEncryption\": true,\"bundles\":[{\"name\":\"${Application.name}\"},{\"name\":\"${executionIdentityVaultPrefix}${Application.name}\"}],\"subject\":{\"kind\":\"ServiceAccount\",\"name\":\"${Application.name}\",\"namespace\":\"${Application.domain}\"}}",
          "enabled": "true"
        },
        {
          "type": "kubernetes/customresource/create",
          "apiVersion": "secrets.stratio.com/v2beta1",
          "kind": "SecretsIdentity",
          "plural": "SecretsIdentities",
          "name": "${Application.name}-catalog",
          "namespace": "${Application.domain}",
          "spec": "{\"enableDataEncryption\": true,\"bundles\":[{\"name\":\"${Application.name}\"},{\"name\":\"${executionIdentityVaultPrefix}${Application.name}\"}],\"subject\":{\"kind\":\"ServiceAccount\",\"name\":\"${Application.name}-catalog\",\"namespace\":\"${Application.domain}\"}}",
          "enabled": "true"
        },
        {
          "type": "kubernetes/customresource/create",
          "apiVersion": "secrets.stratio.com/v2beta1",
          "kind": "SecretsIdentity",
          "plural": "SecretsIdentities",
          "name": "${Application.name}-debug",
          "namespace": "${Application.domain}",
          "spec": "{\"enableDataEncryption\": true,\"bundles\":[{\"name\":\"${Application.name}\"},{\"name\":\"${executionIdentityVaultPrefix}${Application.name}\"}],\"subject\":{\"kind\":\"ServiceAccount\",\"name\":\"${Application.name}-debug\",\"namespace\":\"${Application.domain}\"}}",
          "enabled": "true"
        },
        {
          "type": "kubernetes/customresource/create",
          "apiVersion": "secrets.stratio.com/v2beta1",
          "kind": "SecretsIdentity",
          "plural": "SecretsIdentities",
          "name": "${Application.name}-validator",
          "namespace": "${Application.domain}",
          "spec": "{\"enableDataEncryption\": true,\"bundles\":[{\"name\":\"${Application.name}\"},{\"name\":\"${executionIdentityVaultPrefix}${Application.name}\"}],\"subject\":{\"kind\":\"ServiceAccount\",\"name\":\"${Application.name}-validator\",\"namespace\":\"${Application.domain}\"}}",
          "enabled": "true"
        },
        {
          "type": "kubernetes/customresource/create",
          "apiVersion": "secrets.stratio.com/v2beta1",
          "kind": "SecretsIdentity",
          "plural": "SecretsIdentities",
          "name": "${Application.name}-externalservice",
          "namespace": "${Application.domain}",
          "spec": "{\"enableDataEncryption\": true,\"bundles\":[{\"name\":\"${Application.name}\"},{\"name\":\"${executionIdentityVaultPrefix}${Application.name}\"}],\"subject\":{\"kind\":\"ServiceAccount\",\"name\":\"${Application.name}-externalservice\",\"namespace\":\"${Application.domain}\"}}",
          "enabled": "true"
        },
        {
          "type": "kubernetes/customresource/create",
          "apiVersion": "secrets.stratio.com/v2beta1",
          "kind": "SecretsIdentity",
          "plural": "SecretsIdentities",
          "name": "${executionIdentity}",
          "namespace": "${Application.domain}",
          "spec": "{\"enableDataEncryption\": true,\"bundles\":[{\"name\":\"${executionIdentityVaultPrefix}${Application.name}\"}, {\"name\":\"${Application.name}\", \"passwords\": [ {\"name\":\"jwtsecret\" }] }],\"subject\":{\"kind\":\"ServiceAccount\",\"name\":\"${executionIdentity}\",\"namespace\":\"${Application.domain}\"}}",
          "enabled": "true"
        },
        {
          "type": "time/sleep",
          "millis": "10000"
        }
      ],
      "install/pre": [
        {
          "label": "Print install pre task log",
          "type": "io/print",
          "text": "Printing install pre task log"
        }
      ],
      "install/post": [
        {
          "label": "Print install post task log",
          "type": "io/print",
          "text": "Printing install post task log"
        }
      ],
      "install/finalize": [
        {
          "label": "Print install finalize task log",
          "type": "io/print",
          "text": "Printing install finalize task log"
        }
      ],
      "finish": [
        {
          "label": "Print install finish log",
          "type": "io/print",
          "text": "Printing install finish log"
        }
      ]
    },
    "update": {
      "start": [
        {
          "label": "Print update start log",
          "type": "io/print",
          "text": "Printing update start log"
        }
      ],
      "update/pre": [
        {
          "label": "Print update pre task log",
          "type": "io/print",
          "text": "Printing update pre task log"
        }
      ],
      "update/post": [
        {
          "label": "Print update post task log",
          "type": "io/print",
          "text": "Printing update post task log"
        }
      ],
      "update/finalize": [
        {
          "label": "Print update finalize task log",
          "type": "io/print",
          "text": "Printing update finalize task log"
        }
      ],
      "finish": [
        {
          "label": "Print update finish log",
          "type": "io/print",
          "text": "Printing update finish log"
        }
      ]
    },
    "upgrade": {
      "start": [
        {
          "label": "Print upgrade start log",
          "type": "io/print",
          "text": "Printing upgrade start log"
        }
      ],
      "upgrade/pre": [
        {
          "label": "Print upgrade pre task log",
          "type": "io/print",
          "text": "Printing upgrade pre task log"
        }
      ],
      "upgrade/post": [
        {
          "label": "Print upgrade post task log",
          "type": "io/print",
          "text": "Printing upgrade post task log"
        }
      ],
      "upgrade/finalize": [
        {
          "label": "Print upgrade finalize task log",
          "type": "io/print",
          "text": "Printing upgrade finalize task log"
        }
      ],
      "finish": [
        {
          "label": "Print upgrade finish log",
          "type": "io/print",
          "text": "Printing upgrade finish log"
        }
      ]
    },
    "restart": {
      "start": [
        {
          "label": "Print restart start log",
          "type": "io/print",
          "text": "Printing restart start log"
        }
      ],
      "restart/pre": [
        {
          "label": "Print restart pre task log",
          "type": "io/print",
          "text": "Printing restart pre task log"
        }
      ],
      "restart/post": [
        {
          "label": "Print restart post task log",
          "type": "io/print",
          "text": "Printing restart post task log"
        }
      ],
      "restart/finalize": [
        {
          "label": "Print restart finalize task log",
          "type": "io/print",
          "text": "Printing restart finalize task log"
        }
      ],
      "finish": [
        {
          "label": "Print restart finish log",
          "type": "io/print",
          "text": "Printing restart finish log"
        }
      ]
    },
    "uninstall": {
      "start": [
        {
          "label": "Print uninstall start log",
          "type": "io/print",
          "text": "Printing uninstall start log"
        }
      ],
      "uninstall/pre": [
        {
          "label": "Print uninstall pre task log",
          "type": "io/print",
          "text": "Printing uninstall pre task log"
        }
      ],
      "uninstall/post": [
        {
          "label": "Print uninstall post task log",
          "type": "io/print",
          "text": "Printing uninstall post task log"
        }
      ],
      "uninstall/finalize": [
        {
          "label": "Print uninstall finalize task log",
          "type": "io/print",
          "text": "Printing uninstall finalize task log"
        }
      ],
      "finish": [
        {
          "label": "Print uninstall finish log",
          "type": "io/print",
          "text": "Printing uninstall finish log"
        }
      ]
    }
  }
}
